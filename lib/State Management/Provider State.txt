

ЁЯЪА Provider State Management (Flutter)
рззя╕ПтГг Provider ржЖрж╕рж▓рзЗ ржХрзА?

ЁЯСЙ Provider рж╣рж▓рзЛ Flutter-ржПрж░ state management solutionред
рждрзБржорж┐ ржПржЯрж╛ржХрзЗ ржнрж╛ржмрждрзЗ ржкрж╛рж░рзЛ тЖТ

ЁЯУж ржбрзЗржЯрж╛ рж░рж╛ржЦрж╛рж░ ржмрж╛ржХрзНрж╕ (State) +
ЁЯУв рж╕ржмрж╛рж░ рж╕рж╛ржерзЗ ржбрзЗржЯрж╛ рж╢рзЗрзЯрж╛рж░ ржХрж░рж╛рж░ рж╕рж┐рж╕рзНржЯрзЗржо (Notifier) +
ЁЯСВ ржпрзЗржЦрж╛ржирзЗ ржжрж░ржХрж╛рж░ рж╕рзЗржЦрж╛ржирзЗ ржбрзЗржЯрж╛ рж╢рзЛржирж╛рж░ ржмрзНржпржмрж╕рзНржерж╛ (Consumer)

рзия╕ПтГг Provider ржкрзНржпрж╛ржЯрж╛рж░рзНржирзЗрж░ ржорзВрж▓ ржЪрж░рж┐рждрзНрж░рж░рж╛ ЁЯОн
ЁЯФ╣ (ржХ) ChangeNotifier

ржПржХржЯрж╛ class тЖТ ржпрзЗржЦрж╛ржирзЗ state (data) рж░рж╛ржЦрж╛ рж╣рзЯред

ржПржЯрж┐ notifyListeners() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЬрж╛ржирж╛рзЯ тЖТ "ржбрзЗржЯрж╛ ржмржжрж▓рзЗржЫрзЗ!"

рж╕рж╛ржзрж╛рж░ржгржд Model / Manager class рж╣рж┐рж╕рзЗржмрзЗ ржХрж╛ржЬ ржХрж░рзЗред

ЁЯСЙ ржХрж╛ржЬ: State рж░рж╛ржЦржмрзЗ ржПржмржВ update/rebuild signal ржжрзЗржмрзЗред

ЁЯФ╣ (ржЦ) ChangeNotifierProvider

ржПржЯрж┐ рж╣рж▓рзЛ widget wrapper тЖТ рждрзЛржорж╛рж░ ChangeNotifier ржХрзНрж▓рж╛рж╕ржХрзЗ ржкрзБрж░рзЛ widget tree рждрзЗ ржкрзМржБржЫрзЗ ржжрзЗрзЯред

Provider tree рждрзЗ ржмрж╕рж╛рж▓рзЗ ржирж┐ржЪрзЗрж░ рж╕ржм widget рж╕рж╣ржЬрзЗржЗ рж╕рзЗржЗ state ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗред

ЁЯСЙ ржХрж╛ржЬ: State ржХрзЗ App-ржПрж░ ржоржзрзНржпрзЗ inject ржХрж░рж╛ред

ЁЯФ╣ (ржЧ) Consumer

Consumer ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рждрзБржорж┐ Provider-ржПрж░ ржбрзЗржЯрж╛ listen ржХрж░рзЗ UI ржмрж╛ржирж╛ржУред

рж╢рзБржзрзБржорж╛рждрзНрж░ Consumer-ржП wrap ржХрж░рж╛ widget-ржЗ rebuild рж╣ржмрзЗ (ржкрзБрж░рзЛ widget tree ржирж╛)ред

ЁЯСЙ ржХрж╛ржЬ: UI-ржХрзЗ provider ржПрж░ ржбрзЗржЯрж╛ рж╢рзБржирждрзЗ ржжрзЗржУрзЯрж╛ред

ЁЯФ╣ (ржШ) Provider.of<T>(context)

Provider ржерзЗржХрзЗ ржбрзЗржЯрж╛ ржмрзЗрж░ ржХрж░рж╛рж░ рж╢рж░рзНржЯржХрж╛ржЯред

ржжрзБржЗржнрж╛ржмрзЗ ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯ:

Provider.of<T>(context, listen: true) тЖТ listen ржХрж░ржмрзЗ, UI rebuild рж╣ржмрзЗред

Provider.of<T>(context, listen: false) тЖТ рж╢рзБржзрзБ ржПржХржмрж╛рж░ data ржирзЗржмрзЗ, UI rebuild рж╣ржмрзЗ ржирж╛ред

ЁЯСЙ ржХрж╛ржЬ: рж╕рж░рж╛рж╕рж░рж┐ ржбрзЗржЯрж╛ ржирзЗржУрзЯрж╛ред

ЁЯФ╣ (ржЩ) context.watch<T>() ржмржирж╛ржо context.read<T>()

watch<T>() тЖТ ржбрзЗржЯрж╛ ржкрж░рж┐ржмрж░рзНрждржи рж╣рж▓рзЗ UI rebuild рж╣ржмрзЗред

read<T>() тЖТ ржбрзЗржЯрж╛ рж╢рзБржзрзБ ржкрзЬржмрзЗ, ржХрж┐ржирзНрждрзБ listen ржХрж░ржмрзЗ ржирж╛ред

ЁЯСЙ ржХрзЛржерж╛рзЯ ржХрзЛржиржЯрж╛?

UI widget тЖТ watch ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛред

Button press ржмрж╛ callback тЖТ read ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛред

рзйя╕ПтГг Provider Flow ЁЯЫдя╕П (ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ)
рзз. State ржХрзНрж▓рж╛рж╕ рждрзИрж░рж┐ (ChangeNotifier ржжрж┐рзЯрзЗ)
class ThemeProvider extends ChangeNotifier {
  bool _isLightTheme = true;

  bool get isLightTheme => _isLightTheme;

  void toggleTheme() {
    _isLightTheme = !_isLightTheme;
    notifyListeners(); // UI ржХрзЗ ржЬрж╛ржирж╛ржЪрзНржЫрзЗ тЖТ update рж╣ржУ
  }
}

рзи. State ржкрзБрж░рзЛ ржЕрзНржпрж╛ржкрзЗ ржЗржиржЬрзЗржХрзНржЯ ржХрж░рж╛
void main() {
  runApp(
    ChangeNotifierProvider(
      create: (_) => ThemeProvider(), // ржПржЦрж╛ржирзЗ state ржмрж╕рж▓рзЛ
      child: const MyApp(),
    ),
  );
}

рзй. UI рждрзЗ ржбрзЗржЯрж╛ ржмрзНржпржмрж╣рж╛рж░
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    final themeProvider = context.watch<ThemeProvider>(); // listen ржХрж░ржЫрзЗ

    return MaterialApp(
      theme: themeProvider.isLightTheme ? ThemeData.light() : ThemeData.dark(),
      home: const HomeScreen(),
    );
  }
}

рзк. ржЕрзНржпрж╛ржХрж╢ржи ржирзЗржУрзЯрж╛ (ржбрзЗржЯрж╛ ржкрж░рж┐ржмрж░рзНрждржи)
class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Provider Example")),
      body: Center(
        child: Switch(
          value: context.watch<ThemeProvider>().isLightTheme, // ржбрзЗржЯрж╛ рж╢рзЛржирж╛
          onChanged: (_) {
            context.read<ThemeProvider>().toggleTheme(); // рж╢рзБржзрзБ ржЕрзНржпрж╛ржХрж╢ржи тЖТ read
          },
        ),
      ),
    );
  }
}

рзкя╕ПтГг ржХржЦржи ржХрзЛржи ржЕржВрж╢ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗ? ЁЯза
ржЕржВрж╢	ржХрзА ржХрж╛ржЬ ржХрж░рзЗ	ржХржЦржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗ
ChangeNotifier	State рж░рж╛ржЦрзЗ, notify ржХрж░рзЗ	ржбрзЗржЯрж╛ ржУ рж▓ржЬрж┐ржХ ржорзНржпрж╛ржирзЗржЬ ржХрж░рждрзЗ
ChangeNotifierProvider	State ржХрзЗ widget tree рждрзЗ inject ржХрж░рзЗ	root widget ржмрж╛ ржпрзЗржЦрж╛ржирзЗ ржжрж░ржХрж╛рж░ рж╕рзЗржЦрж╛ржирзЗ
Consumer	ржирж┐рж░рзНржжрж┐рж╖рзНржЯ widget ржХрзЗ state рж╢рзЛржирж╛рзЯ	ржЫрзЛржЯ widget ржХрзЗ rebuild ржХрж░рждрзЗ ржЪрж╛ржЗрж▓рзЗ
Provider.of<T>(context)	State access ржХрж░рзЗ	ржПржХржмрж╛рж░ ржбрзЗржЯрж╛ ржирж┐рждрзЗ ржмрж╛ listen рж╕рж╣
context.watch<T>()	listen ржХрж░рзЗ ржУ rebuild рж╣рзЯ	UI widget ржПрж░ ржнрзЗрждрж░рзЗ
context.read<T>()	рж╢рзБржзрзБ ржбрзЗржЯрж╛ ржирзЗрзЯ, listen ржирж╛	Button press ржмрж╛ callback ржП
рзля╕ПтГг Provider ржжрж┐рзЯрзЗ рж╕рж╛ржзрж╛рж░ржгржд ржХрзА ржХрзА ржХрж░рж╛ рж╣рзЯ?

ЁЯФД Theme (Light/Dark mode) toggle

ЁЯЫТ Shopping Cart (item add/remove, total count)

ЁЯСд User Login state (logged in/out)

ЁЯМР API Data state (loading/data/error)

тЬи рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржЫржмрж┐ (Visual Flow)

ChangeNotifier (State + Logic)
        тмЗ
ChangeNotifierProvider (Inject State in Tree)
        тмЗ
Consumer / watch (UI listens to State)
        тмЗ
read (Button/Action updates State)
        тмЗ
notifyListeners() тЖТ Rebuild only listeners


///////////////////////////////////////////////////////////////////////////////////////////////
тЭУржкрзНрж░рж╢рзНржи рзз:

ChangeNotifier-ржПрж░ notifyListeners() ржорзЗржержбржЯрж┐рж░ ржорзВрж▓ ржХрж╛ржЬ ржХрзА? ржПржЯрж┐ ржХрж▓ ржирж╛ ржХрж░рж▓рзЗ ржХрзА рж╕ржорж╕рзНржпрж╛ рж╣ржмрзЗ?

тЬЕ ржЙрждрзНрждрж░:

notifyListeners() ржПрж░ ржХрж╛ржЬ рж╣рж▓рзЛ тАФ provider ржХрзЗ ржпрзЗ рж╕ржм widget listen ржХрж░ржЫрзЗ рждрж╛ржжрзЗрж░ ржЬрж╛ржирж╛ржирзЛ "state ржкрж░рж┐ржмрж░рзНрждржи рж╣ржпрж╝рзЗржЫрзЗ тЖТ ржПржЦржи rebuild рж╣ржУ"ред

ржпржжрж┐ ржПржЯрж╛ ржХрж▓ ржирж╛ ржХрж░рзЛ тЖТ

state (ржбрзЗржЯрж╛) ржЖржкржбрзЗржЯ рж╣ржмрзЗ ржарж┐ржХржЗ,

ржХрж┐ржирзНрждрзБ UI ржЬрж╛ржиржмрзЗ ржирж╛ state ржмржжрж▓рзЗржЫрзЗ тЖТ ржлрж▓рзЗ UI ржЖржкржбрзЗржЯ рж╣ржмрзЗ ржирж╛ред

ЁЯУМ ржоржирзЗ рж░рж╛ржЦрзЛ ЁЯСЙ Provider = reactive system тЖТ notifyListeners() рж╣рж▓рзЛ triggerред

тЭУржкрзНрж░рж╢рзНржи рзи:

context.read<T>() ржПржмржВ context.watch<T>()-ржПрж░ ржоржзрзНржпрзЗ ржкрзНрж░ржзрж╛ржи ржкрж╛рж░рзНржержХрзНржп ржХрзА? ржПржХржЯрж┐ ElevatedButton-ржПрж░ onPressed ржХрж▓ржмрзНржпрж╛ржХрзЗрж░ ржнрзЗрждрж░рзЗ ржХрзЛржиржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржмрзЗрж╢рж┐ ржпрзБржХрзНрждрж┐ржпрзБржХрзНржд ржПржмржВ ржХрзЗржи?

тЬЕ ржЙрждрзНрждрж░:

context.watch<T>() тЖТ Provider ржерзЗржХрзЗ ржбрзЗржЯрж╛ ржирзЗрзЯ ржПржмржВ listen ржХрж░рзЗред ржорж╛ржирзЗ notifyListeners() рж╣рж▓рзЗ ржПржЗ widget rebuild рж╣ржмрзЗред

context.read<T>() тЖТ Provider ржерзЗржХрзЗ ржбрзЗржЯрж╛ ржирзЗрзЯ ржХрж┐ржирзНрждрзБ listen ржХрж░рзЗ ржирж╛ред рж╢рзБржзрзБ ржПржХржмрж╛рж░ access ржХрж░рзЗред

ЁЯСЙ ElevatedButton-ржПрж░ onPressed ржПрж░ ржнрзЗрждрж░рзЗ context.read<T>() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржЙржЪрж┐ржд, ржХрж╛рж░ржг:

ржПржЦрж╛ржирзЗ рж╢рзБржзрзБ ржорзЗржержб ржХрж▓ ржХрж░рждрзЗ рж╣ржмрзЗ (ржпрзЗржоржи: toggleTheme() ржмрж╛ addToCart())ред

rebuild ржХрж░рж╛рж░ ржжрж░ржХрж╛рж░ ржирзЗржЗред

рждрж╛ржЗ watch ржжрж┐рж▓рзЗ ржЕржпржерж╛ widget rebuild рж╣рзЯрзЗ ржкрж╛рж░ржлрж░ржорзНржпрж╛ржирзНрж╕ ржХржорждрзЗ ржкрж╛рж░рзЗред

тЭУржкрзНрж░рж╢рзНржи рзй:

ржЕрзНржпрж╛ржкрзЗрж░ рж╕рзНржЯрзЗржЯ ржпржжрж┐ ржЕржирзЗржХржЧрзБрж▓рзЛ рж╕рзНржХрзНрж░рж┐ржи ржЬрзБржбрж╝рзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ ChangeNotifierProvider ржЙржЗржЬрзЗржЯржЯрж┐ржХрзЗ рж╕рж╛ржзрж╛рж░ржгржд ржЙржЗржЬрзЗржЯ ржЯрзНрж░рж┐-ржПрж░ ржХрзЛржи ржЬрж╛ржпрж╝ржЧрж╛ржпрж╝ рж░рж╛ржЦрж╛ рж╣ржпрж╝?

тЬЕ ржЙрждрзНрждрж░:

рж╕рж╛ржзрж╛рж░ржгржд MaterialApp ржмрж╛ CupertinoApp ржПрж░ ржЙржкрж░рзЗ тЖТ ржорж╛ржирзЗ root ржП рж░рж╛ржЦрж╛ рж╣ржпрж╝ред

ржЕржирзЗржХ рж╕ржорзЯ main() ржлрж╛ржВрж╢ржирзЗрж░ ржнрзЗрждрж░рзЗ runApp() ржПрж░ child рж╣рж┐рж╕рзЗржмрзЗ рж░рж╛ржЦрж╛ рж╣ржпрж╝ред

ржПрждрзЗ ржХрж░рзЗ ржЕрзНржпрж╛ржкрзЗрж░ ржкрзБрж░рзЛ widget tree ржерзЗржХрзЗ state access ржХрж░рж╛ ржпрж╛рзЯред

ЁЯУМ Shortcut ржоржирзЗ рж░рж╛ржЦрзЛ:

local state (ржХрзЗржмрж▓ ржПржХржЯрж┐ screen ржП ржжрж░ржХрж╛рж░) тЖТ screen widget ржПрж░ ржнрзЗрждрж░рзЗ provider wrap ржХрж░рзЛред

global state (ржПржХрж╛ржзрж┐ржХ screen ржП ржжрж░ржХрж╛рж░) тЖТ root ржП provider wrap ржХрж░рзЛред
..............................................................................
ЁЯУЭ ржХрзЛржб ржмрзНржпрж╛ржЦрзНржпрж╛ (Line by Line with Comments)
// ЁЯЫТ рзз. ржЖржорж╛ржжрзЗрж░ ржорзВрж▓ State Management Class (ChangeNotifier ржжрж┐рзЯрзЗ ржмрж╛ржирж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ)
class ShoppingSystem extends ChangeNotifier {
  int _cartCount = 0;                     // Cart ржПрж░ item рж╕ржВржЦрзНржпрж╛ ржзрж░рзЗ рж░рж╛ржЦржмрзЗ (private variable)
  int get cartCount => _cartCount;        // Getter тЖТ UI ржерзЗржХрзЗ cartCount ржжрзЗржЦрж╛ ржпрж╛ржмрзЗ

  int _WishlistCount = 0;                 // Wishlist ржПрж░ item рж╕ржВржЦрзНржпрж╛ ржзрж░рзЗ рж░рж╛ржЦржмрзЗ
  int get WishlistCount => _WishlistCount; // Getter тЖТ UI ржерзЗржХрзЗ wishlistCount ржжрзЗржЦрж╛ ржпрж╛ржмрзЗ

  // ЁЯЯв Cart-ржП item ржпрзЛржЧ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
  void addToCart(){
    _cartCount++;                         // ржорж╛ржи рзз ржмрж╛рзЬржмрзЗ
    notifyListeners();                    // рж╕ржмрж╛ржЗржХрзЗ ржЬрж╛ржирж╛ржмрзЗ тЖТ ржбрзЗржЯрж╛ ржмржжрж▓рзЗржЫрзЗ, UI рж░рж┐ржлрзНрж░рзЗрж╢ ржХрж░рзЛ
  }

  // ЁЯФ┤ Wishlist-ржП item ржпрзЛржЧ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
  void addToWishlist(){
    _WishlistCount++;
    notifyListeners();                    // ржбрзЗржЯрж╛ ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ ржХрж╛рж░ржгрзЗ UI ржЖржмрж╛рж░ build рж╣ржмрзЗ
  }

  // ЁЯФД Reset ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
  void resetAll(){
    _cartCount = 0;                       // Cart count = 0
    _WishlistCount = 0;                   // Wishlist count = 0
    notifyListeners();                    // UI-ржХрзЗ ржЬрж╛ржирж╛ржмрзЗ тЖТ update рж╣ржУ
  }
}

void main(){
  runApp(
      ChangeNotifierProvider(             // рзи. ChangeNotifierProvider ржжрж┐рзЯрзЗ State inject ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        create:(_)=> ShoppingSystem(),    // Provider ржХрзЗ ржмрж▓рж╛ рж╣ржЪрзНржЫрзЗ тЖТ ShoppingSystem state ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗ
        child: ShoppingCountSystemProvider(), // ржкрзБрж░рзЛ ржЕрзНржпрж╛ржк Provider ржПрж░ child
      )
  );
}

class ShoppingCountSystemProvider extends StatelessWidget {
  const ShoppingCountSystemProvider({super.key});

  @override
  Widget build(BuildContext context) {
    final  cratControl = context.watch<ShoppingSystem>(); // UI listen ржХрж░ржмрзЗ тЖТ data ржкрж░рж┐ржмрж░рзНрждржи рж╣рж▓рзЗ rebuild рж╣ржмрзЗ
    final  cratCounterControl = context.read<ShoppingSystem>(); // рж╢рзБржзрзБ ржлрж╛ржВрж╢ржи ржХрж▓ ржХрж░рж╛рж░ ржЬржирзНржп тЖТ listen ржХрж░ржмрзЗ ржирж╛

    return Consumer<ShoppingSystem>(      // рзй. Consumer тЖТ UI ржХрзЗ ржЬрж╛ржирж╛ржмрзЗ state ржкрж░рж┐ржмрж░рзНрждржи рж╣рж▓рзЗ rebuild рж╣ржУ
      builder: (BuildContext context, ShoppingSystem , child) {
      return MaterialApp(
        debugShowCheckedModeBanner: false,
        home: Scaffold(
            appBar: AppBar(title: const Text('Shopping System'),
              actions: [
                // ЁЯЯв Cart Count ржжрзЗржЦрж╛ржирзЛ
                Text("Cart: ${cratControl.cartCount}",
                     style: TextStyle(color: Colors.green,fontWeight: FontWeight.bold),),
                SizedBox(width: 10,),
                // ЁЯФ┤ Wishlist Count ржжрзЗржЦрж╛ржирзЛ
                Text("Wishlist: ${cratControl.WishlistCount}",
                     style: TextStyle(color: Colors.red,fontWeight: FontWeight.bold),),
              ],
            ),

            body: Center(
              child: Card(               // Card UI
                elevation: 5,
                child: Container(
                  padding: EdgeInsets.all(10),
                  width: 300,
                  height: 250,
                  decoration: BoxDecoration(
                    color: Colors.yellow,
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text("Product Controller",
                          style: TextStyle(fontSize: 20,fontWeight: FontWeight.bold),),
                      SizedBox(height: 10,),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          // ЁЯЯв Cart ржП ржпрзЛржЧ ржХрж░рж╛рж░ ржмрж╛ржЯржи
                          ElevatedButton(
                              onPressed: (){
                                cratCounterControl.addToCart(); // рж╢рзБржзрзБ ржлрж╛ржВрж╢ржи ржХрж▓ рж╣ржЪрзНржЫрзЗ (read ржмрзНржпржмрж╣рж╛рж░)
                              },
                              child: Text("Add to Cart")),
                          SizedBox(width: 10,),
                          // ЁЯФ┤ Wishlist ржП ржпрзЛржЧ ржХрж░рж╛рж░ ржмрж╛ржЯржи
                          ElevatedButton(
                              onPressed: (){
                                cratCounterControl.addToWishlist();
                              },
                              child: Text("Add to Wishlist")),
                        ],
                      ),
                      SizedBox(height: 10,),
                      // ЁЯФД рж╕ржм рж░рж┐рж╕рзЗржЯ ржХрж░рж╛рж░ ржмрж╛ржЯржи
                      ElevatedButton(
                          onPressed: (){
                            cratCounterControl.resetAll();
                          },
                          child: Text("Reset All")),
                    ],
                  ),
                ),
              ),
            )
        ),
      );
    },
    );
  }
}

ЁЯУМ ржПржЗ ржХрзЛржб ржжрж┐рзЯрзЗ ржХрзА рж╣рзЯрзЗржЫрзЗ?

State Management ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ShoppingSystem class ржжрж┐рзЯрзЗ (Cart ржУ Wishlist ржХрж╛ржЙржирзНржЯ рж░рж╛ржЦрж╛, Add, Reset)ред

ChangeNotifierProvider тЖТ State inject ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ржкрзБрж░рзЛ ржЕрзНржпрж╛ржкрзЗред

context.watch<ShoppingSystem>() тЖТ UI data listen ржХрж░ржЫрзЗ (Cart/Wishlist рж╕ржВржЦрзНржпрж╛ ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп)ред

context.read<ShoppingSystem>() тЖТ рж╢рзБржзрзБ Action (Button press тЖТ add/reset) ржП state update ржХрж░рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред

Consumer тЖТ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░ржЫрзЗ state ржмржжрж▓рж╛рж▓рзЗ UI rebuild рж╣ржмрзЗред

ЁЯОп ржЪрзВрзЬрж╛ржирзНржд ржкрзНрж░ржнрж╛ржм (Effect)

ЁЯФД ржпржЦржи рждрзБржорж┐ Add to Cart ржЪрж╛ржкржмрзЗ тЖТ _cartCount рзз ржмрж╛рзЬржмрзЗ тЖТ notifyListeners() рж╣ржмрзЗ тЖТ Cart Text ржЖржкржбрзЗржЯ рж╣ржмрзЗред

тЭдя╕П ржпржЦржи рждрзБржорж┐ Add to Wishlist ржЪрж╛ржкржмрзЗ тЖТ _WishlistCount рзз ржмрж╛рзЬржмрзЗ тЖТ UI рждрзЗ рж╕ржВржЦрзНржпрж╛ ржмржжрж▓рж╛ржмрзЗред

тнХ ржпржЦржи рждрзБржорж┐ Reset All ржЪрж╛ржкржмрзЗ тЖТ рж╕ржм ржХрж╛ржЙржирзНржЯ рзж рж╣рзЯрзЗ ржпрж╛ржмрзЗ тЖТ UI ржЖржмрж╛рж░ рж░рж┐ржлрзНрж░рзЗрж╢ рж╣ржмрзЗред

ЁЯСЙ ржкрзБрж░рзЛ ржкрзНрж░рзЛржЬрзЗржХрзНржЯрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржмрзЛржЭрж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ тАФ
Provider ржжрж┐рзЯрзЗ ржХрзАржнрж╛ржмрзЗ state рж░рж╛ржЦрж╛, UI ржЖржкржбрзЗржЯ ржХрж░рж╛, ржЖрж░ Action ржЕржирзБржпрж╛рзЯрзА ржбрзЗржЯрж╛ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ ржпрж╛рзЯред....................................