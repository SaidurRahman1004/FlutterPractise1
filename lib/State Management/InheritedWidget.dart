/*
üß© InheritedWidget ‡¶ï‡ßá ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶≠‡¶æ‡¶¨‡¶¨‡ßá?
üîπ InheritedWidget ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶ï‡ßÄ?

üëâ InheritedWidget ‡¶π‡¶≤‡ßã data container‡•§
‡¶è‡¶ü‡¶æ Widget Tree-‡¶è‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ‡ßü ‡¶¨‡¶∏‡ßá ‡¶•‡¶æ‡¶ï‡ßá ‡¶Ü‡¶∞ ‡¶§‡¶æ‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ data ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶∏‡¶¨ child widget-‡¶è ‡¶´‡ßç‡¶∞‡¶ø ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¶‡ßá‡ßü‡•§

‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ü‡¶æ‡¶ï‡ßá ‡¶≠‡¶æ‡¶¨‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã üëâ "Global variable ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ Widget Tree-‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá"

üëâ ‡¶ß‡¶∞‡ßã ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ó‡¶æ‡¶õ (Widget Tree) üå≥

InheritedWidget ‡¶π‡¶≤‡ßã ‡¶ó‡¶æ‡¶õ‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤ (Root)-‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã ‚Üí ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ü‡¶õ‡ßá‡•§

‡¶ó‡¶æ‡¶õ‡ßá‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá ‡¶Ø‡¶§ ‡¶°‡¶æ‡¶≤‡¶™‡¶æ‡¶≤‡¶æ (Child Widget) ‡¶Ü‡¶õ‡ßá, ‡¶∏‡¶¨‡¶æ‡¶á ‡¶∏‡¶π‡¶ú‡ßá ‡¶∏‡ßá‡¶á ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§

üîë ‡¶ï‡¶®‡¶∏‡ßá‡¶™‡ßç‡¶ü (Key Ideas)

InheritedWidget ‚Üí ‡¶°‡ßá‡¶ü‡¶æ ‡¶ß‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡ßá‡•§

of(context) ‚Üí child widget ‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßá‡¶á ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¶‡¶∞‡¶ú‡¶æ‡•§

‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶≤‡ßá ‚Üí ‡¶Ø‡ßá widget-‡¶è ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡ßá‡¶ü‡¶æ‡¶á rebuild ‡¶π‡¶¨‡ßá‡•§

üß† ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶∂‡¶∞‡ßç‡¶ü‡¶ï‡¶æ‡¶ü

üëâ InheritedWidget = ‡¶è‡¶ï ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ‡ßü data ‡¶∞‡¶æ‡¶ñ‡¶æ + ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ widget ‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá free access ‡¶¶‡ßá‡¶ì‡ßü‡¶æ‡•§
‡¶è‡¶ü‡¶æ Flutter-‡¶è‡¶∞ ‚Äúglobal data sharing‚Äù ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∏‡¶ø‡¶ï ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡•§

 */
//Practice Task 7.5 ‚Äî InheritedWidget Basics Ans Submitted
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

class AppStateScope extends InheritedWidget {
  //‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ  ‡¶Æ‡¶æ‡¶®  ‡¶∞‡ßá‡¶ñ‡ßá‡¶õ‡¶ø‡•§
  final bool isDark;
  final int cartCount;
  final VoidCallback toggleTheme;
  final VoidCallback addToCart;
  final VoidCallback resetCart;

  const AppStateScope({
    super.key,
    required this.isDark,
    required this.cartCount,
    required this.toggleTheme,
    required this.addToCart,
    required this.resetCart,
    required Widget child,
  }) : super(child: child);

  static AppStateScope of(BuildContext context) {
    //of(context) ‚Üí ‡¶è‡¶ü‡¶æ child widget-‡¶ï‡ßá ‡¶∏‡ßá‡¶á data ‡¶è‡¶®‡ßá ‡¶¶‡ßá‡ßü‡•§
    return context.dependOnInheritedWidgetOfExactType<AppStateScope>()!;
  }

  @override
  bool updateShouldNotify(AppStateScope oldWidget) {
    //cartCount ‡¶ì isDark ‡¶Æ‡¶æ‡¶® ‡¶¨‡¶¶‡¶≤‡¶æ‡¶≤‡ßá child widget-‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶¨‡ßá ‚Äúrebuild ‡¶π‡¶ì‚Äù!
    return oldWidget.isDark != isDark || oldWidget.cartCount != cartCount;
  }
}

class AppStateContainer extends StatefulWidget {
  final Widget child;

  const AppStateContainer({super.key, required this.child});

  @override
  State<AppStateContainer> createState() => _AppStateContainerState();
}

class _AppStateContainerState extends State<AppStateContainer> {
  bool _isDark = false;
  int _cartCount = 0;

  void _toggleTheme() => setState(() => _isDark = !_isDark);

  void _addToCart() => setState(() => _cartCount++);

  void _resetCart() => setState(() => _cartCount = 0);

  @override
  Widget build(BuildContext context) {
    return AppStateScope(
      isDark: _isDark,
      cartCount: _cartCount,
      toggleTheme: _toggleTheme,
      addToCart: _addToCart,
      resetCart: _resetCart,
      child: widget.child,
    );
  }
}

class AppStateDemo extends StatelessWidget {
  const AppStateDemo({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: AppStateScope.of(context).isDark
          ? ThemeData.dark()
          : ThemeData.light(),
      home: AppStateDemoUi(),
    );
  }
}

//ui
class AppStateDemoUi extends StatelessWidget {
  const AppStateDemoUi({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const themeModeText()),
      body: Center(
        child: Card(
          elevation: 5,
          child: Container(
            decoration: BoxDecoration(borderRadius: BorderRadius.circular(10)),
            height: 250,
            width: 250,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                CartdBadge(),
                SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    AddToCartButton(),
                    SizedBox(width: 10),
                    ResetButton(),
                  ],
                ),
                SizedBox(height: 20),
                toogle(),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

//dark
class themeModeText extends StatelessWidget {
  const themeModeText({super.key});

  @override
  Widget build(BuildContext context) {
    final isDark = AppStateScope.of(context).isDark;
    return Text(isDark ? 'Dark Mode' : 'Light Mode');
  }
}

//count
class CartdBadge extends StatelessWidget {
  CartdBadge({super.key});

  @override
  Widget build(BuildContext context) {
    final cartCount = AppStateScope.of(context).cartCount;
    return Text("Cart Count: $cartCount");
  }
}

//cart button
class AddToCartButton extends StatelessWidget {
  const AddToCartButton({super.key});

  @override
  Widget build(BuildContext context) {
    final addToCart = AppStateScope.of(context).addToCart;
    return ElevatedButton(
      onPressed: () {
        addToCart();
      },
      child: Text("Add To Cart"),
    );
  }
}

//reset
class ResetButton extends StatelessWidget {
  const ResetButton({super.key});

  @override
  Widget build(BuildContext context) {
    final resetCart = AppStateScope.of(context).resetCart;
    return ElevatedButton(
      onPressed: () {
        resetCart();
      },
      child: Text("Reset"),
    );
  }
}

//toogle
class toogle extends StatelessWidget {
  const toogle({super.key});

  @override
  Widget build(BuildContext context) {
    final toggleTheme = AppStateScope.of(context).toggleTheme;
    return ElevatedButton(
      onPressed: () {
        toggleTheme();
      },
      child: Text("Toogle Theme"),
    );
  }
}
