State কী?
সহজ কথায়, State হলো এমন যেকোনো ডেটা যা সময়ের সাথে সাথে পরিবর্তন হতে পারে এবং UI-কে প্রভাবিত করে।

উদাহরণ:
একটি অ্যাপের ডার্ক মোড চালু আছে নাকি বন্ধ (isDarkMode = true/false)।
শপিং কার্টে কয়টি আইটেম আছে (itemCount = 5)।
একজন ব্যবহারকারী লগইন করা আছে কিনা (isLoggedIn = true)।
একটি টেক্সট ফিল্ডে কী লেখা হচ্ছে (username = "siyam")।
যখন এই ডেটাগুলো পরিবর্তন হয় (যেমন, ব্যবহারকারী ডার্ক মোড অন করলো),
তখন UI-কেও সেই অনুযায়ী আপডেট হতে হয় (স্ক্রিনের রঙ কালো হয়ে যাওয়া)। এই ডেটা
 এবং UI-এর মধ্যে সংযোগ স্থাপন এবং সিঙ্ক্রোনাইজ রাখার প্রক্রিয়াকেই State Management বলা হয়।

 Flutter-এ State-এর প্রকারভেদ
 Flutter-এ মূলত দুই ধরনের স্টেট আছে:

 Ephemeral State (ক্ষণস্থায়ী স্টেট):

 এটি এমন স্টেট যা শুধুমাত্র একটি উইজেটের ভেতরেই সীমাবদ্ধ থাকে।
 উদাহরণ: একটি Switch অন নাকি অফ, একটি TextField-এ লেখা টেক্সট, একটি পেজের _currentIndex।
 এই ধরনের স্টেট ম্যানেজ করার জন্য StatefulWidget এবং এর setState() মেথডই যথেষ্ট।

 App State (অ্যাপ-ব্যাপী স্টেট):
 এটি এমন স্টেট যা অ্যাপের বিভিন্ন উইজেটের মধ্যে শেয়ার করার প্রয়োজন হয়।
 উদাহরণ: ব্যবহারকারীর লগইন তথ্য, শপিং কার্টের ডেটা, অ্যাপের থিম।
 এই ধরনের স্টেট setState() দিয়ে ম্যানেজ করা খুবই জটিল এবং अव्यवस्थित হয়ে যায়। এর জন্যই আমাদের Provider, Riverpod, Bloc-এর মতো অ্যাডভান্সড State Management সমাধানগুলোর প্রয়োজন হয়।

 setState(): সবচেয়ে বেসিক স্টেট ম্যানেজমেন্ট
 আমরা StatefulWidget-এর সাথে setState() ব্যবহার করে আসছি। এটি Ephemeral State-এর জন্য খুবই কার্যকর।
 এটি কীভাবে কাজ করে:
 তুমি যখন setState() কল করো, তুমি Flutter-কে বলো যে "কিছু ডেটা পরিবর্তন হয়েছে"।
 Flutter তখন ওই StatefulWidget-এর build() মেথডটিকে আবার কল করে।
 build() মেথডটি নতুন ডেটার উপর ভিত্তি করে UI-কে পুনরায় তৈরি বা "rebuild" করে, ফলে ব্যবহারকারী পরিবর্তনটি দেখতে পায়।

 setState()-এর সীমাবদ্ধতা:
 setState() শুধুমাত্র যে উইজেটে কল করা হয়,
 সেই উইজেট এবং তার চাইল্ড উইজেটগুলোকেই rebuild করতে পারে।
  যদি তোমাকে এমন কোনো ডেটা পরিবর্তন করতে হয় যা সম্পূর্ণ ভিন্ন কোনো
  উইজেটকে প্রভাবিত করবে (যেমন, একটি স্ক্রিনের বাটন ক্লিক করে অন্য স্ক্রিনের টেক্সট পরিবর্তন করা),
  তখন setState() একটি ভালো সমাধান নয়। এই সমস্যাকে "prop drilling"
 বা state-কে অপ্রয়োজনীয়ভাবে অনেকগুলো স্তরের মধ্যে দিয়ে পাস করানো বলা হয়।