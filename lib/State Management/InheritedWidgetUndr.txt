import 'package:flutter/material.dart';

// ЁЯФ╣ InheritedWidget
class AppStateScope extends InheritedWidget { //InheritedWidget Delevary Boy
  final bool isDark;
  final int cartCount;
  final VoidCallback toggleTheme;
  final VoidCallback addToCart;
  final VoidCallback resetCart;

  const AppStateScope({
    super.key,
    required this.isDark,
    required this.cartCount,
    required this.toggleTheme,
    required this.addToCart,
    required this.resetCart,
    required Widget child,
  }) : super(child: child);

  static AppStateScope of(BuildContext context) {
    return context.dependOnInheritedWidgetOfExactType<AppStateScope>()!;
  }

  @override
  bool updateShouldNotify(AppStateScope oldWidget) {
    return oldWidget.isDark != isDark || oldWidget.cartCount != cartCount;
  }
}

// ЁЯФ╣ State Container
class AppStateContainer extends StatefulWidget {
  final Widget child;
  const AppStateContainer({super.key, required this.child});

  @override
  State<AppStateContainer> createState() => _AppStateContainerState();
}

class _AppStateContainerState extends State<AppStateContainer> {
  bool _isDark = false;
  int _cartCount = 0;

  void _toggleTheme() => setState(() => _isDark = !_isDark);
  void _addToCart() => setState(() => _cartCount++);
  void _resetCart() => setState(() => _cartCount = 0);

  @override
  Widget build(BuildContext context) {
    return AppStateScope(
      isDark: _isDark,
      cartCount: _cartCount,
      toggleTheme: _toggleTheme,
      addToCart: _addToCart,
      resetCart: _resetCart,
      child: widget.child,
    );
  }
}

// ЁЯФ╣ Main App
class AppStateDemo extends StatelessWidget {
  const AppStateDemo({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: AppStateScope.of(context).isDark
          ? ThemeData.dark()
          : ThemeData.light(),
      home: const AppStateDemoUi(),
    );
  }
}

// ЁЯФ╣ UI
class AppStateDemoUi extends StatelessWidget {
  const AppStateDemoUi({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const ThemeModeText()),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: const [
            CartBadge(),
            SizedBox(height: 20),
            AddToCartButton(),
            SizedBox(height: 10),
            ResetButton(),
            SizedBox(height: 10),
            ToggleThemeButton(),
          ],
        ),
      ),
    );
  }
}

// ЁЯФ╣ Dark/Light Mode Text
class ThemeModeText extends StatelessWidget {
  const ThemeModeText({super.key});

  @override
  Widget build(BuildContext context) {
    final isDark = AppStateScope.of(context).isDark;
    return Text(isDark ? 'Dark Mode' : 'Light Mode');
  }
}

// ЁЯФ╣ Cart Count
class CartBadge extends StatelessWidget {
  const CartBadge({super.key});

  @override
  Widget build(BuildContext context) {
    final cartCount = AppStateScope.of(context).cartCount;
    return Text("Cart Count: $cartCount");
  }
}

// ЁЯФ╣ Add To Cart Button
class AddToCartButton extends StatelessWidget {
  const AddToCartButton({super.key});

  @override
  Widget build(BuildContext context) {
    final addToCart = AppStateScope.of(context).addToCart;
    return ElevatedButton(
        onPressed: () => addToCart(), child: const Text("Add To Cart"));
  }
}

// ЁЯФ╣ Reset Button
class ResetButton extends StatelessWidget {
  const ResetButton({super.key});

  @override
  Widget build(BuildContext context) {
    final resetCart = AppStateScope.of(context).resetCart;
    return ElevatedButton(
        onPressed: () => resetCart(), child: const Text("Reset"));
  }
}

// ЁЯФ╣ Toggle Theme Button
class ToggleThemeButton extends StatelessWidget {
  const ToggleThemeButton({super.key});

  @override
  Widget build(BuildContext context) {
    final toggleTheme = AppStateScope.of(context).toggleTheme;
    return ElevatedButton(
        onPressed: () => toggleTheme(), child: const Text("Toggle Theme"));
  }
}

// ЁЯФ╣ Main Function
void main() {
  runApp(
    AppStateContainer(
      child: const AppStateDemo(),
    ),
  );
}
.......................................................................

ЁЯзй ржЧрж▓рзНржк ржжрж┐рзЯрзЗ ржмрзБржЭрзЛ

ржнрж╛ржмрзЛ рждрзБржорж┐ ржПржХржЯрж╛ ржмрзЬрзЛ ржкрж░рж┐ржмрж╛рж░рзЗ ржЖржЫрзЛред

ржмрж╛рзЬрж┐рж░ ржмрзЬрзЛ ржнрж╛ржЗ (AppStateContainer + AppStateScope) ржЯрж╛ржХрж╛, ржЦрж╛ржмрж╛рж░ ржЖрж░ рж▓рж╛ржЗржЯ-ржлрзНржпрж╛ржи ржХржирзНржЯрзНрж░рзЛрж▓ ржирж┐ржЬрзЗрж░ ржХрж╛ржЫрзЗ рж░рзЗржЦрзЗржЫрзЗред

ржЫрзЛржЯ ржнрж╛ржЗ-ржмрзЛржирзЗрж░рж╛ (CartBadge, AddToCartButton, ResetButton, ToggleThemeButton) ржпржЦржиржЗ ржХрж┐ржЫрзБ ржжрж░ржХрж╛рж░ рж╣рзЯ, рждрж╛рж░рж╛ ржмрзЬ ржнрж╛ржЗржХрзЗ ржЬрж┐ржЬрзНржЮрзЗрж╕ ржХрж░рзЗ (AppStateScope.of(context)) тЖТ рждрж╛рж░ржкрж░ рж╕рзЗржЗ ржЬрж┐ржирж┐рж╕ ржкрзЗрзЯрзЗ ржпрж╛рзЯред

ржорж╛ржирзЗ ЁЯСЙ ржПржХ ржЬрж╛рзЯржЧрж╛рзЯ ржбрзЗржЯрж╛ рж░рж╛ржЦрж╛ ржЖржЫрзЗ, рж╕ржмрж╛ржЗ рж╕рзЗржЯрж╛ ржлрзНрж░рж┐ ржЗржЙржЬ ржХрж░рждрзЗ ржкрж╛рж░ржЫрзЗред

ЁЯФС ржПржЗ ржХрзЛржбрзЗ ржХрзЗ ржХрзА ржХрж░ржЫрзЗ?
1. AppStateContainer (StatefulWidget)

ЁЯСЙ ржПржЯрж╛ рж╣рж▓рзЛ рж╕рзНржЯрзЛрж░рж░рзБржоред
ржПржЦрж╛ржирзЗ рж╕ржм ржбрзЗржЯрж╛ рж░рж╛ржЦрж╛ рж╣рзЯ:

_isDark тЖТ Dark/Light mode

_cartCount тЖТ Cart ржПрж░ рж╕ржВржЦрзНржпрж╛

ржПржЦрж╛ржирзЗ method ржЖржЫрзЗ тЖТ _toggleTheme(), _addToCart(), _resetCart()

ржПржЗрж╕ржм method ржХрзЗ InheritedWidget ржПрж░ ржнрзЗрждрж░ ржжрж┐рзЯрзЗ ржирж┐ржЪрзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯред

2. AppStateScope (InheritedWidget)

ЁЯСЙ ржПржЯрж╛ рж╣рж▓рзЛ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржмрзЯред

AppStateContainer ржпрзЗржЗ data ржжрзЗрзЯ тЖТ рж╕рзЗржЯрж╛ ржирж┐ржЪрзЗ child widget-ржП ржкрж╛ржарж╛рзЯред

ржпржЦржи ржбрзЗржЯрж╛ ржмржжрж▓рж╛рзЯ (Dark/Light ржмрж╛ cartCount), рждржЦржи updateShouldNotify ржмрж▓рзЗ ржжрзЗрзЯ ЁЯСЙ "рж╣рзЗ ржирж┐ржЪрзЗрж░ widget, рждрзБржорж┐ ржЖржмрж╛рж░ redraw рж╣рзЯрзЗ ржпрж╛ржУ"

ржПржЦрж╛ржирзЗржЗ ржЖржЫрзЗ ржЬрж╛ржжрзБрж░ ржжрж░ржЬрж╛:

AppStateScope.of(context)


ЁЯСЙ ржПрж░ ржорж╛ржзрзНржпржорзЗ ржирж┐ржЪрзЗрж░ widget ржбрзЗржЯрж╛ ржмрзЗрж░ ржХрж░рзЗред

3. AppStateDemo (MaterialApp)

ЁЯСЙ ржПржЦрж╛ржирзЗ Theme switch рж╣ржЪрзНржЫрзЗ:

theme: AppStateScope.of(context).isDark
          ? ThemeData.dark()
          : ThemeData.light(),


ржорж╛ржирзЗ Dark/Light mode ржЪрзЗржХ ржХрж░ржЫрзЗред

4. Child Widgets

рж╕ржмрж╛ржЗ рж╢рзБржзрзБ ржбрзЗржЯрж╛ ржирзЗрзЯ ржЖрж░ ржХрж╛ржЬ ржХрж░рзЗ

ThemeModeText тЖТ рж╢рзБржзрзБ ржжрзЗржЦрзЗ ржПржЦржи Light ржирж╛ржХрж┐ Darkред

CartBadge тЖТ рж╢рзБржзрзБ ржжрзЗржЦрзЗ ржХрждржЧрзБрж▓рзЛ ржЬрж┐ржирж┐рж╕ ржЖржЫрзЗред

AddToCartButton тЖТ ржЯрж┐ржкрж▓рзЗ addToCart() ржХрж▓ ржХрж░рзЗред

ResetButton тЖТ рж╕ржм рж╢рзВржирзНржпрзЗ рж╕рзЗржЯ ржХрж░рзЗред

ToggleThemeButton тЖТ Light тЖФ Dark ржорзЛржб ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗред

ЁЯза ржПржЦржи InheritedWidget ржХржирж╕рзЗржкрзНржЯ

ЁЯСЙ ржПржХ рж▓рж╛ржЗржирзЗ ржоржирзЗ рж░рж╛ржЦрзЛ:

InheritedWidget = Widget Tree-ржПрж░ ржнрзЗрждрж░рзЗ Global Store + Free Access Door

Data рж░рж╛ржЦржмрзЗ AppStateContainer

Door ржЦрзБрж▓ржмрзЗ AppStateScope.of(context)

ржпрж╛рж░ ржжрж░ржХрж╛рж░ тЖТ ржирж┐ржЪрзЗрж░ widget ржЧрж┐рзЯрзЗ ржирж┐рзЯрзЗ ржЖрж╕ржмрзЗ

тЪб Flow Diagram (Text ржЖржХрж╛рж░рзЗ)
AppStateContainer (StatefulWidget)
    |
    тЖУ (data + methods)
AppStateScope (InheritedWidget)
    |
    тФЬтФАтФА ThemeModeText тЖТ ржбрзЗржЯрж╛ ржирзЗрзЯ (isDark)
    тФЬтФАтФА CartBadge тЖТ ржбрзЗржЯрж╛ ржирзЗрзЯ (cartCount)
    тФЬтФАтФА AddToCartButton тЖТ ржлрж╛ржВрж╢ржи ржХрж▓ ржХрж░рзЗ (addToCart)
    тФЬтФАтФА ResetButton тЖТ ржлрж╛ржВрж╢ржи ржХрж▓ ржХрж░рзЗ (resetCart)
    тФФтФАтФА ToggleThemeButton тЖТ ржлрж╛ржВрж╢ржи ржХрж▓ ржХрж░рзЗ (toggleTheme)


ЁЯСЙ ржПржЦржи рждрзБржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рзЛ:
InheritedWidget ржЖрж╕рж▓рзЗ ржирж┐ржЬрзЗ ржХрж┐ржЫрзБ ржХрж╛ржЬ ржХрж░рзЗ ржирж╛ тЖТ рж╢рзБржзрзБ data share ржХрж░рзЗ ржжрзЗрзЯ ржирж┐ржЪрзЗред
Real ржХрж╛ржЬ (State Change) ржХрж░рзЗ AppStateContainerред
