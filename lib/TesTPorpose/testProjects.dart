

import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;


class MyAppAPIAjijul extends StatelessWidget {
  const MyAppAPIAjijul({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(debugShowCheckedModeBanner: false, home: Home());
  }
}

class Home extends StatefulWidget {
  const Home({super.key});

  @override
  State<Home> createState() => _HomeState();
}

class _HomeState extends State<Home> {
  final TextEditingController _idController = TextEditingController();

  Future<Map?>? futurePost;

  Future<Map?> fetchPost(String id) async {
    final url = Uri.parse("https://jsonplaceholder.typicode.com/posts/$id");
    try {
      final res = await http.get(url).timeout(const Duration(seconds: 10));
      if (res.statusCode == 200) {
        final decode = jsonDecode(res.body);
        if (decode is Map) {
          return decode;
        } else {
          throw const FormatException("Invalid format");
        }
      } else {
        throw Exception("Server error: ${res.statusCode}");
      }
    } on SocketException {
      throw Exception("No Internet Connection");
    } on TimeoutException {
      throw Exception("Request Timeout");
    } on FormatException {
      throw Exception(" Invalid Data Format");
    } catch (e) {
      throw Exception("Unknown Error: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Data fetching FutureBuilder"),
        backgroundColor: Colors.teal,
      ),
      body: Column(
        children: [
          const SizedBox(height: 40),
          Center(
            child: SizedBox(
              width: MediaQuery.of(context).size.width - 20,
              height: 60,
              child: Row(
                children: [
                  Expanded(
                    flex: 2,
                    child: TextField(
                      keyboardType: TextInputType.number,
                      controller: _idController,
                      decoration: const InputDecoration(
                        prefixIcon: Icon(Icons.search),
                        hintText: "Search post",
                        hintStyle: TextStyle(color: Colors.teal),
                        border: OutlineInputBorder(),
                      ),
                    ),
                  ),
                  Expanded(
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.teal,
                        foregroundColor: Colors.white,
                        minimumSize: const Size(80, 55),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(0),
                        ),
                      ),
                      onPressed: () {
                        if (_idController.text.isNotEmpty) {
                          setState(() {
                            futurePost = fetchPost(_idController.text);
                          });
                        }
                      },
                      child: const Text("Fetch post"),
                    ),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 70),
          Expanded(
            child: FutureBuilder<Map?>(
              future: futurePost,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                } else if (snapshot.hasError) {
                  return Center(
                    child: Text(
                      "Error : ${snapshot.error}",
                      style: const TextStyle(color: Colors.red),
                    ),
                  );
                } else if (snapshot.hasData && snapshot.data != null) {
                  final data = snapshot.data!;
                  return ListView(
                    shrinkWrap: true,
                    padding: const EdgeInsets.all(16),
                    children: [
                      Text(
                        "ID: ${data["id"]}",
                        style: const TextStyle(fontSize: 20),
                      ),
                      Text(
                        "UserID: ${data["userId"]}",
                        style: const TextStyle(fontSize: 20),
                      ),
                      Text(
                        "Title: ${data["title"]}",
                        style: const TextStyle(fontSize: 20),
                      ),
                      Text(
                        "Body: ${data["body"]}",
                        style: const TextStyle(fontSize: 20),
                      ),
                    ],
                  );
                }
                return const Center(
                  child: Text("üîç Enter an ID to fetch data"),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}




//////////////////////////////////Example JSOn APi///////////////////////////////////////

/*
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

// ‡¶ï. User Model ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏
class User {
  final int id;
  final String name;
  final String email;

  User({required this.id, required this.name, required this.email});

  // JSON (Map) ‡¶•‡ßá‡¶ï‡ßá User ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø factory constructor
  factory User.fromJson(Map<String, dynamic> json) {
    return User(
      id: json['id'],
      name: json['name'],
      email: json['email'],
    );
  }
}

// ‡¶ñ. API ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
Future<List<User>> fetchUsers() async {
  final response = await http.get(Uri.parse('https://jsonplaceholder.typicode.com/users'));

  if (response.statusCode == 200) { // 200 ‡¶Æ‡¶æ‡¶®‡ßá ‡¶∏‡¶´‡¶≤
    List<dynamic> jsonResponse = jsonDecode(response.body);
    return jsonResponse.map((user) => User.fromJson(user)).toList();
  } else {
    throw Exception('Failed to load users');
  }
}

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: UserListScreen(),
    );
  }
}

// ‡¶ó. UI ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®
class UserListScreen extends StatefulWidget {
  @override
  _UserListScreenState createState() => _UserListScreenState();
}

class _UserListScreenState extends State<UserListScreen> {
  late Future<List<User>> futureUsers;

  @override
  void initState() {
    super.initState();
    futureUsers = fetchUsers(); // initState-‡¶è Future ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Users from API')),
      body: Center(
        child: FutureBuilder<List<User>>(
          future: futureUsers, // FutureBuilder-‡¶ï‡ßá Future ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
          builder: (context, snapshot) {
            // ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const CircularProgressIndicator();
            }
            // ‡¶ï‡ßã‡¶®‡ßã error ‡¶π‡ßü‡ßá‡¶õ‡ßá
            else if (snapshot.hasError) {
              return Text('Error: ${snapshot.error}');
            }
            // ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶è‡¶∏‡ßá‡¶õ‡ßá
            else if (snapshot.hasData) {
              return ListView.builder(
                itemCount: snapshot.data!.length,
                itemBuilder: (context, index) {
                  User user = snapshot.data![index];
                  return ListTile(
                    leading: CircleAvatar(child: Text(user.id.toString())),
                    title: Text(user.name),
                    subtitle: Text(user.email),
                  );
                },
              );
            }
            // ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ
            return const Text('No users found.');
          },
        ),
      ),
    );
  }
}

 */

/////////////////////////////////‡¶™Provider State Management////////////////////
/*
// ... (import statements for http, convert, material) ...
import 'package:provider/provider.dart'; // Provider ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®

// --- ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡¶°‡ßá‡¶≤ (todo class) ---
// (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶∞ todo ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá)
class todo {
  int userId;
  int id;
  String title;
  bool completed;

  todo({
    required this.userId,
    required this.id,
    required this.title,
    required this.completed,
  });

  factory todo.fromJson(Map<String, dynamic> json) {
    return todo(
      userId: json['userId'],
      id: json['id'],
      title: json['title'],
      completed: json['completed'],
    );
  }
}

// --- ChangeNotifier ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ (State Management Logic) ---
class TodoProvider extends ChangeNotifier {
  List<todo> _todos = []; // ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü, ‡¶Ø‡¶æ todo ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶¨‡ßá
  bool _isLoading = false; // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
  String? _errorMessage; // ‡¶è‡¶∞‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

  // UI ‡¶•‡ßá‡¶ï‡ßá todo ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Getter
  List<todo> get todos => _todos;
  // UI ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Getter
  bool get isLoading => _isLoading;
  // UI ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶∞‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Getter
  String? get errorMessage => _errorMessage;

  // API ‡¶•‡ßá‡¶ï‡ßá todo ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶∏ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  Future<void> fetchTodos() async {
    _isLoading = true;
    _errorMessage = null; // ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶è‡¶∞‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡ßç‡¶≤‡¶ø‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    notifyListeners(); // UI-‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶® ‡¶Ø‡ßá ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá

    try {
      final url = Uri.parse('https://jsonplaceholder.typicode.com/todos');
      final response = await http.get(url);

      if (response.statusCode == 200) {
        List<dynamic> jsonResponse = jsonDecode(response.body);
        _todos = jsonResponse.map((jsonTodo) => todo.fromJson(jsonTodo)).toList();
      } else {
        _errorMessage = 'Failed to load todo data from API (Status code: ${response.statusCode})';
        _todos = []; // ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
      }
    } catch (e) {
      _errorMessage = 'An error occurred: ${e.toString()}';
      _todos = []; // ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
    }

    _isLoading = false;
    notifyListeners(); // UI-‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶® ‡¶Ø‡ßá ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶°‡ßá‡¶ü‡¶æ/‡¶è‡¶∞‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá
  }

  // ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü todo ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ‡ßá‡¶∞ 'completed' ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ü‡¶ó‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  void toggleTodoCompleted(int todoId) {
    // ‡¶Ø‡ßá todo ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ‡¶ü‡¶ø‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá, ‡¶∏‡ßá‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®
    final todoIndex = _todos.indexWhere((item) => item.id == todoId);
    if (todoIndex != -1) {
      _todos[todoIndex].completed = !_todos[todoIndex].completed;
      notifyListeners(); // UI-‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶® ‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá
    }
  }
}

// --- UI (User Interface) ---

// main.dart ‡¶¨‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá‡¶∞ ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡ßá Provider ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
/*
void main() {
  runApp(
    ChangeNotifierProvider(
      create: (context) => TodoProvider(), // TodoProvider ‡¶á‡¶®‡ßç‡¶∏‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
      child: const TodoApp(), // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶â‡¶á‡¶ú‡ßá‡¶ü
    ),
  );
}
*/

// ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶â‡¶á‡¶ú‡ßá‡¶ü (‡¶Ü‡¶ó‡ßá ‡¶Ø‡¶æ todoUi ‡¶õ‡¶ø‡¶≤)
class TodoApp extends StatelessWidget {
  const TodoApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: TodoHomeScreen(), // ‡¶π‡ßã‡¶Æ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®
    );
  }
}

// ‡¶π‡ßã‡¶Æ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶® UI
class TodoHomeScreen extends StatefulWidget {
  const TodoHomeScreen({super.key});

  @override
  State<TodoHomeScreen> createState() => _TodoHomeScreenState();
}

class _TodoHomeScreenState extends State<TodoHomeScreen> {
  @override
  void initState() {
    super.initState();
    // ‡¶â‡¶á‡¶ú‡ßá‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Provider ‡¶•‡ßá‡¶ï‡ßá fetchTodos() ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
    // listen: false ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü initState/didChangeDependencies ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá Provider ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü,
    // ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶á ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡ßü‡ßá UI ‡¶è‡¶ñ‡¶®‡ßã ‡¶¨‡¶ø‡¶≤‡ßç‡¶° ‡¶π‡ßü‡¶®‡¶ø ‡¶¨‡¶æ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Æ‡ßá‡¶•‡¶° ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á, ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶∂‡ßÅ‡¶®‡¶§‡ßá ‡¶®‡ßü‡•§
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Provider.of<TodoProvider>(context, listen: false).fetchTodos();
    });
  }

  // SnackBar ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ helper ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á)
  void _showSnackBar(String message, BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        duration: const Duration(seconds: 2),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // Consumer ‡¶â‡¶á‡¶ú‡ßá‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá TodoProvider ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∂‡ßã‡¶®‡¶æ ‡¶π‡ßü
    return Scaffold(
      appBar: AppBar(
        title: const Text('Todo List (Provider)'),
        actions: [
          // ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶¨‡¶æ‡¶ü‡¶® (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: () {
              Provider.of<TodoProvider>(context, listen: false).fetchTodos();
            },
          )
        ],
      ),
      body: Consumer<TodoProvider>(
        builder: (context, todoProvider, child) {
          // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
          if (todoProvider.isLoading) {
            return const Center(child: CircularProgressIndicator());
          }

          // ‡¶è‡¶∞‡¶∞ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
          if (todoProvider.errorMessage != null) {
            return Center(child: Text('Error: ${todoProvider.errorMessage}'));
          }

          // ‡¶°‡ßá‡¶ü‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
          if (todoProvider.todos.isEmpty) {
            return const Center(child: Text('No Todos Found'));
          }

          // ‡¶°‡ßá‡¶ü‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ListView ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®
          return ListView.builder(
            itemCount: todoProvider.todos.length,
            itemBuilder: (context, index) {
              final todoItem = todoProvider.todos[index];
              return Card(
                elevation: 3,
                margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
                child: ListTile(
                  title: Text(todoItem.title),
                  trailing: Checkbox(
                    value: todoItem.completed,
                    onChanged: (bool? newValue) {
                      // Provider ‡¶•‡ßá‡¶ï‡ßá toggleTodoCompleted ‡¶Æ‡ßá‡¶•‡¶° ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
                      todoProvider.toggleTodoCompleted(todoItem.id);
                      _showSnackBar(
                        'Todo "${todoItem.title}" marked as ${newValue! ? "completed" : "incomplete"}',
                        context,
                      );
                    },
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }
}
 */