/*
MediaQuery ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶≠‡¶æ‡¶®‡ßç‡¶∏‡¶° (Orientation ‡¶è‡¶¨‡¶Ç Breakpoints) üìê
‡¶è‡¶ü‡¶æ LayoutBuilder ‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø device information ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

üü¢ MediaQuery ‡¶ï‡ßÄ?

üëâ MediaQuery ‡¶π‡¶≤‡ßã Flutter ‡¶è‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ Widget/Helper, ‡¶Ø‡ßá‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ device ‡¶è‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø:

Screen Size ‚Üí Width & Height
Device Orientation ‚Üí Portrait / Landscape
Pixel Ratio
Padding (SafeArea info)
Text Scaling Factor

üü¢ Syntax:
MediaQuery.of(context).size.width   // ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶•
MediaQuery.of(context).size.height  // ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡ßá‡¶∞ ‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶æ
MediaQuery.of(context).orientation  // Orientation (Portrait/Landscape)


‡ßß. ‡¶§‡¶§‡ßç‡¶§‡ßç‡¶¨ (Explanation)
Orientation (‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏‡ßá‡¶∞ ‡¶¶‡¶ø‡¶ï)
Orientation ‡¶¨‡¶≤‡¶§‡ßá ‡¶¨‡ßã‡¶ù‡¶æ‡ßü ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏‡¶ü‡¶ø ‡¶≤‡¶Æ‡ßç‡¶¨‡¶æ‡¶≤‡¶Æ‡ßç‡¶¨‡¶ø‡¶≠‡¶æ‡¶¨‡ßá (portrait) ‡¶®‡¶æ‡¶ï‡¶ø ‡¶Ü‡ßú‡¶æ‡¶Ü‡ßú‡¶ø‡¶≠‡¶æ‡¶¨‡ßá (landscape) ‡¶ß‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá‡•§ MediaQuery ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶è‡¶á ‡¶§‡¶•‡ßç‡¶Ø‡¶ü‡¶ø ‡¶¶‡ßá‡ßü‡•§
Portrait: ‡¶Ø‡¶ñ‡¶® ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏‡ßá‡¶∞ ‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶æ ‡¶§‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶•‡ßá‡¶∞ ‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶•‡¶æ‡¶ï‡ßá (‡¶Ø‡ßá‡¶Æ‡¶® ‡¶´‡ßã‡¶® ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶ß‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü)‡•§
Landscape: ‡¶Ø‡¶ñ‡¶® ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶• ‡¶§‡¶æ‡¶∞ ‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶æ‡¶∞ ‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶•‡¶æ‡¶ï‡ßá (‡¶Ø‡ßá‡¶Æ‡¶® ‡¶´‡ßã‡¶®‡¶ü‡¶ø ‡¶ò‡ßÅ‡¶∞‡¶ø‡ßü‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü)‡•§

‡¶è‡¶á ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ì‡¶™‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶ï‡¶∞‡ßá UI ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶™‡¶æ‡¶∞‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®, portrait ‡¶Æ‡ßã‡¶°‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ landscape ‡¶Æ‡ßã‡¶°‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ ‡¶•‡¶æ‡¶ï‡¶æ‡ßü ‡¶∏‡ßá‡¶á ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡¶æ‡¶∂‡ßá ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶≠‡¶ø‡¶â‡¶ì ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§
MediaQuery ‡¶•‡ßá‡¶ï‡ßá Orientation ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶â‡¶™‡¶æ‡ßü:
Dart

final Orientation orientation = MediaQuery.of(context).orientation;
if (orientation == Orientation.portrait) {
  // Portrait ‡¶Æ‡ßã‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø UI ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
} else {
  // Landscape ‡¶Æ‡ßã‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø UI ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
}
Breakpoints (‡¶¨‡ßç‡¶∞‡ßá‡¶ï‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü)
Breakpoint ‡¶π‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶•‡ßá‡¶∞ ‡¶∏‡ßÄ‡¶Æ‡¶æ ‡¶Ø‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏‡¶ï‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡¶ø‡•§ ‡¶è‡¶ü‡¶ø ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏‡¶ø‡¶≠ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡•§ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∂‡¶∞‡ßç‡¶§ (if-else) ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡¶≤‡ßá ‡¶¶‡¶ø‡¶á ‡¶Ø‡ßá, ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶• ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶∞ (breakpoint) ‡¶ö‡ßá‡ßü‡ßá ‡¶ï‡¶Æ ‡¶¨‡¶æ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá UI ‡¶ï‡ßá‡¶Æ‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá‡•§

‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§, Material Design ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶ï‡¶ø‡¶õ‡ßÅ —Å—Ç–∞–Ω–¥–∞—Ä—Ç ‡¶¨‡ßç‡¶∞‡ßá‡¶ï‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü:

Mobile (‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤): < 600px
Tablet (‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨‡¶≤‡ßá‡¶ü): 600px - 840px
Desktop (‡¶°‡ßá‡¶∏‡ßç‡¶ï‡¶ü‡¶™): > 840px
‡¶è‡¶á ‡¶¨‡ßç‡¶∞‡ßá‡¶ï‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶™‡ßÅ‡¶∞‡ßã ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏‡¶ø‡¶≠ ‡¶≤‡ßá‡¶Ü‡¶â‡¶ü ‡¶ï‡¶æ‡¶†‡¶æ‡¶Æ‡ßã ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®:
‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤‡ßá: ‡¶è‡¶ï‡¶ü‡¶ø ListView ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá‡•§
‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨‡¶≤‡ßá‡¶ü‡ßá: ‡¶è‡¶ï‡¶ü‡¶ø GridView ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá ‡¶Ø‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡¶æ‡¶∞‡¶ø‡¶§‡ßá ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§
‡¶°‡ßá‡¶∏‡ßç‡¶ï‡¶ü‡¶™‡ßá: ‡¶¨‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø Navigation Rail ‡¶è‡¶¨‡¶Ç ‡¶°‡¶æ‡¶® ‡¶¶‡¶ø‡¶ï‡ßá ‡¶Æ‡ßÇ‡¶≤ ‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá‡•§
MediaQuery ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶∞‡ßá‡¶ï‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:

Dart

final double screenWidth = MediaQuery.of(context).size.width;

if (screenWidth < 600) {
  // ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶≤‡ßá‡¶Ü‡¶â‡¶ü
} else if (screenWidth < 840) {
  // ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨‡¶≤‡ßá‡¶ü ‡¶≤‡ßá‡¶Ü‡¶â‡¶ü
} else {
  // ‡¶°‡ßá‡¶∏‡ßç‡¶ï‡¶ü‡¶™ ‡¶≤‡ßá‡¶Ü‡¶â‡¶ü
}
 */

//Practice Task 6.39 ‚Äî MediaQuery Advanced Ans Submitted
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

class MdaQu extends StatelessWidget {
  const MdaQu({super.key});
  final List<Map<String, dynamic>> products = const [
    {'icon': Icons.phone_android, 'name': 'Smartphone', 'price': 12000},
    {'icon': Icons.laptop, 'name': 'Laptop', 'price': 55000},
    {'icon': Icons.watch, 'name': 'Smart Watch', 'price': 3500},
    {'icon': Icons.headphones, 'name': 'Headphones', 'price': 2200},
    {'icon': Icons.tv, 'name': 'LED TV', 'price': 40000},
  ];
  mysnk(msg, context) {
    return ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(msg), duration: Duration(seconds: 3)),
    );
  }

  @override
  Widget build(BuildContext context) {
    final orientation = MediaQuery.of(context).orientation;

    return Scaffold(
      appBar: AppBar(title: const Text("MediaQuery Example")),
      body: Column(
        children: [
          Expanded(
              child: orientation == Orientation.portrait ? buildPotr() : buildLands(),

          ),
          Padding(
            padding: EdgeInsets.all(16.0),
            child: Text(
              orientation == Orientation.portrait ? 'Portrait' : 'Landscape',
            ),
          )

        ],
      ),
    );
  }
//Portrait
  Widget buildPotr(){
    return ListView.builder(
      itemCount: products.length,
        itemBuilder: (context,index){
          final product = products[index];
          return GestureDetector(
            onTap:()=> mysnk("Selected Product: ${product['name']} ", context),
            child: ListTile(
              leading: Icon(product['icon']),
              title: Text(product['name']),
              subtitle: Text('‡ß≥${product['price']}'),
            ),
          );

        }
    );
  }

  //Landscape
Widget buildLands(){
    return GridView.builder(
      itemCount: products.length,
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            crossAxisSpacing: 10,
            mainAxisSpacing: 10,
            childAspectRatio: 0.8,
        ),
        itemBuilder: (context,index){
          final product = products[index];
          return GestureDetector(
            onTap:()=> mysnk("Selected Product: ${product['name']} ", context),
            child: Card(
              elevation: 5,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),

              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(product['icon'],size: 40, color: Colors.blue,),
                  SizedBox(height: 10,),
                  Text(product['name'],style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold),),
                  SizedBox(height: 10,),
                  Text('‡ß≥${product['price']}',style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold,color: Colors.red),),

                ],

              ),
            ),
          );

        }
    );
}

}

//////////////////////////////////////////////////////////
//Practice Task 6.39 ‚Äî MediaQuery Advanced Ans Submitted Gmini

class ParentMdq extends StatelessWidget {
  const ParentMdq({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("MediaQuery Example"),
      ),
      body: MdqaPtGmni(),

    );
  }
}

class MdqaPtGmni extends StatelessWidget {
  const MdqaPtGmni({super.key});

  final List<Map<String, dynamic>> products = const [
    {'icon': Icons.phone_android, 'name': 'Smartphone', 'price': 12000},
    {'icon': Icons.laptop, 'name': 'Laptop', 'price': 55000},
    {'icon': Icons.watch, 'name': 'Smart Watch', 'price': 3500},
    {'icon': Icons.headphones, 'name': 'Headphones', 'price': 2200},
    {'icon': Icons.tv, 'name': 'LED TV', 'price': 40000},
  ];
  mysnk(msg, context) {
    return ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(msg), duration: Duration(seconds: 3)),
    );
  }

  @override
  Widget build(BuildContext context) {
    final orientation = MediaQuery.of(context).orientation;
    final double screenWidth = MediaQuery.of(context).size.width;

    if(orientation == Orientation.portrait){
      return buildPotsGrd1();
    }
    else{
      if(screenWidth<600){
        return buildLand6sGrd2();
      }else{
        return buildLand6UsGrd3();
      }
    }


  }

//PotGrid1
  Widget buildPotsGrd1(){
    return GridView.builder(
        itemCount: products.length,
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          crossAxisSpacing: 10,
          mainAxisSpacing: 10,
          childAspectRatio: 0.8,
        ),
        itemBuilder: (context,index){
          final product = products[index];
          return GestureDetector(
            onTap:()=> mysnk("Selected Product: ${product['name']} ", context),
            child: Card(
              elevation: 5,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),

              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(product['icon'],size: 40, color: Colors.blue,),
                  SizedBox(height: 10,),
                  Text(product['name'],style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold),),
                  SizedBox(height: 10,),
                  Text('‡ß≥${product['price']}',style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold,color: Colors.red),),

                ],

              ),
            ),
          );

        }
    );
  }

  //Lands600Grid1
  Widget buildLand6sGrd2(){
    return GridView.builder(
        itemCount: products.length,
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 3,
          crossAxisSpacing: 10,
          mainAxisSpacing: 10,
          childAspectRatio: 0.8,
        ),
        itemBuilder: (context,index){
          final product = products[index];
          return GestureDetector(
            onTap:()=> mysnk("Selected Product: ${product['name']} ", context),
            child: Card(
              elevation: 5,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),

              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(product['icon'],size: 40, color: Colors.blue,),
                  SizedBox(height: 10,),
                  Text(product['name'],style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold),),
                  SizedBox(height: 10,),
                  Text('‡ß≥${product['price']}',style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold,color: Colors.red),),

                ],

              ),
            ),
          );

        }
    );
  }


  //Lands600Grid1
  Widget buildLand6UsGrd3(){
    return GridView.builder(
        itemCount: products.length,
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 4,
          crossAxisSpacing: 10,
          mainAxisSpacing: 10,
          childAspectRatio: 0.8,
        ),
        itemBuilder: (context,index){
          final product = products[index];
          return GestureDetector(
            onTap:()=> mysnk("Selected Product: ${product['name']} ", context),
            child: Card(
              elevation: 5,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),

              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(product['icon'],size: 40, color: Colors.blue,),
                  SizedBox(height: 10,),
                  Text(product['name'],style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold),),
                  SizedBox(height: 10,),
                  Text('‡ß≥${product['price']}',style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold,color: Colors.red),),

                ],

              ),
            ),
          );

        }
    );
  }
}
////////////////////////////////////////////////////////
//Practice Task 6.39 ‚Äî Updated ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ì ‡¶ï‡¶Æ ‡¶ï‡ßã‡¶°

class ParentMdqUpdated extends StatelessWidget {
  const ParentMdqUpdated({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("MediaQuery Example"),
      ),
      body: MdqaPtGmniUpdted(),

    );
  }
}

class MdqaPtGmniUpdted extends StatelessWidget {
  const MdqaPtGmniUpdted({super.key});

  final List<Map<String, dynamic>> products = const [
    {'icon': Icons.phone_android, 'name': 'Smartphone', 'price': 12000},
    {'icon': Icons.laptop, 'name': 'Laptop', 'price': 55000},
    {'icon': Icons.watch, 'name': 'Smart Watch', 'price': 3500},
    {'icon': Icons.headphones, 'name': 'Headphones', 'price': 2200},
    {'icon': Icons.tv, 'name': 'LED TV', 'price': 40000},
  ];
  mysnk(msg, context) {
    return ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(msg), duration: Duration(seconds: 3)),
    );
  }

  @override
  Widget build(BuildContext context) {
    final orientation = MediaQuery.of(context).orientation;
    final double screenWidth = MediaQuery.of(context).size.width;

    int crossAxisCount;
    if(orientation == Orientation.portrait){
      crossAxisCount = 2;
    }
    else{
      if(screenWidth<600){
        crossAxisCount = 3;
      }else{
        crossAxisCount = 4;
      }
    }
    return GridViewFnPtLd(crossAxisCount);


  }

//GridViewFn
  Widget GridViewFnPtLd(int crossAxisCount){
    return GridView.builder(
        itemCount: products.length,
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: crossAxisCount,
          crossAxisSpacing: 10,
          mainAxisSpacing: 10,
          childAspectRatio: 0.8,
        ),
        itemBuilder: (context,index){
          final product = products[index];
          return GestureDetector(
            onTap:()=> mysnk("Selected Product: ${product['name']} ", context),
            child: Card(
              elevation: 5,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),

              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(product['icon'],size: 40, color: Colors.blue,),
                  SizedBox(height: 10,),
                  Text(product['name'],style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold),),
                  SizedBox(height: 10,),
                  Text('‡ß≥${product['price']}',style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold,color: Colors.red),),

                ],

              ),
            ),
          );

        }
    );
  }

}
