import 'package:flutter/material.dart';                         // Flutter ржПрж░ Material design UI components ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп import

void main() {
  runApp(MaterialApp(                                         // ржЕрзНржпрж╛ржк ржЪрж╛рж▓рзБ ржХрж░рж╛рж░ ржЬржирзНржп MaterialApp widget ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ
    home: MyApp(),                                            // ржЕрзНржпрж╛ржкрзЗрж░ ржкрзНрж░ржержо рж╕рзНржХрзНрж░рж┐ржи рж╣рж┐рж╕рзЗржмрзЗ MyApp widget ржмрзНржпржмрж╣рж╛рж░
  ));
}

class Product {                                               // ржПржХржЯрж┐ custom class ржпрзЗржЯрж╛ ржПржХржЯрж┐ ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржбрзЗржЯрж╛ ржзрж╛рж░ржг ржХрж░рзЗ
  final String title;                                         // ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржирж╛ржо
  final String description;                                   // ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржмрж░рзНржгржирж╛
  final String imageUrl;                                      // ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржЗржорзЗржЬ URL

  Product(this.title, this.description, this.imageUrl);       // ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░: ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ рждрж┐ржиржЯрж┐ рждржерзНржп рж╕рзЗржЯ ржХрж░рзЗ
}

class MyApp extends StatelessWidget {
  final List<Product> productList = [                         // рзлржЯрж┐ ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ рж▓рж┐рж╕рзНржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ
    Product("iPhone 15", "Apple Smartphone", "https://i.postimg.cc/jjKRZgRq/profile-pic-1.png"),
    Product("MacBook", "Apple Laptop", "https://i.postimg.cc/bNZdjVSY/o1.jpg"),
    Product("Headphone", "Wireless", "https://i.postimg.cc/9XzZ1h7q/headphone.jpg"),
    Product("Smartwatch", "Fitness Tracker", "https://i.postimg.cc/Y2kYj9wh/smartwatch.jpg"),
    Product("Camera", "DSLR", "https://i.postimg.cc/qvRJSPVN/camera.jpg"),
  ];

  showSnack(context, msg) {                                   // ржПржХржЯрж┐ ржлрж╛ржВрж╢ржи: рж╕рзНржХрзНрж░рж┐ржирзЗ snackbar ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(msg)),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(                                          // Scaffold: ржорзВрж▓ рж╕рзНржХрзНрж░рж┐ржирзЗрж░ layout рждрзИрж░рж┐ ржХрж░рзЗ
      appBar: AppBar(                                         // AppBar: ржЙржкрж░рзЗрж░ ржЯрж╛ржЗржЯрзЗрж▓ ржмрж╛рж░рзЗрж░ ржЬржирзНржп
        title: Text("Product Grid"),
        backgroundColor: Colors.deepPurple,                   // AppBar ржПрж░ ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб рж░ржЩ
      ),
      body: Padding(
        padding: const EdgeInsets.all(10),                    // ржЪрж╛рж░ржкрж╛рж╢рзЗ 10px padding
        child: GridView.builder(                              // ржПржХржЯрж┐ grid view рждрзИрж░рж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ржпрж╛ dynamically item ржжрзЗржЦрж╛рзЯ
          itemCount: productList.length,                      // ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж▓рж┐рж╕рзНржЯрзЗрж░ total item рж╕ржВржЦрзНржпрж╛
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,                                // ржкрзНрж░рждрж┐ рж░рзЛ-рждрзЗ рзиржЯрж┐ ржЖржЗржЯрзЗржо ржерж╛ржХржмрзЗ
            crossAxisSpacing: 10,                             // ржжрзБржЗ grid item ржПрж░ ржорж╛ржЭрзЗ horizontal gap
            mainAxisSpacing: 10,                              // ржжрзБржЗ grid item ржПрж░ ржорж╛ржЭрзЗ vertical gap
            childAspectRatio: 0.75,                           // ржкрзНрж░рждрж┐ржЯрж┐ ржЖржЗржЯрзЗржорзЗрж░ width:height ржЕржирзБржкрж╛ржд
          ),
          itemBuilder: (context, index) {                     // ржкрзНрж░рждрж┐ржЯрж┐ grid item рждрзИрж░рж┐ ржХрж░рж╛рж░ ржЬржирзНржп builder
            final product = productList[index];               // ржмрж░рзНрждржорж╛ржи index ржЕржирзБржпрж╛рзЯрзА product ржбрзЗржЯрж╛ ржмрзЗрж░ ржХрж░рж╛
            return GestureDetector(                           // GestureDetector: ржХрзНрж▓рж┐ржХ ржбрж┐ржЯрзЗржХрзНржЯ ржХрж░рж╛рж░ ржЬржирзНржп
              onTap: () => showSnack(context, "${product.title} Clicked!"),  // ржХрзНрж▓рж┐ржХ ржХрж░рж▓рзЗ snackbar ржжрзЗржЦрж╛рзЯ
              child: Card(                                    // ржкрзНрж░рждрж┐ржЯрж┐ ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ ржХрж╛рж░рзНржб UI
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),    // ржХрж╛рж░рзНржбрзЗрж░ ржХрзЛржг ржЧрзЛрж▓ ржХрж░рж╛
                ),
                elevation: 5,                                 // ржХрж╛рж░рзНржбрзЗрж░ ржЫрж╛рзЯрж╛
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    ClipRRect(                                // ржЗржорзЗржЬрзЗрж░ ржЙржкрж░рзЗрж░ ржжрж┐ржХрзЗрж░ ржХрзЛржг ржЧрзЛрж▓ ржХрж░рж╛рж░ ржЬржирзНржп
                      borderRadius: BorderRadius.vertical(
                        top: Radius.circular(15),
                      ),
                      child: Image.network(                   // ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржЗржорзЗржЬ рж▓рзЛржб ржХрж░рж╛
                        product.imageUrl,
                        height: 100,
                        width: double.infinity,
                        fit: BoxFit.cover,                    // ржЗржорзЗржЬ container ржПрж░ ржкрзБрж░рзЛ ржЬрж╛рзЯржЧрж╛ ржХржнрж╛рж░ ржХрж░ржмрзЗ
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.all(8),       // ржХрж╛рж░рзНржбрзЗрж░ ржнрж┐рждрж░рзЗрж░ content ржПрж░ ржЬржирзНржп padding
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(product.title,                 // ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржирж╛ржо ржжрзЗржЦрж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
                              style: TextStyle(fontWeight: FontWeight.bold)),
                          SizedBox(height: 5),                // ржирж╛ржо ржУ description ржПрж░ ржорж╛ржЭрзЗ gap
                          Text(product.description,           // ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржмрж░рзНржгржирж╛
                              style: TextStyle(color: Colors.grey[700])),
                          SizedBox(height: 10),               // ржмрж░рзНржгржирж╛ ржУ ржмрж╛ржЯржирзЗрж░ ржорж╛ржЭрзЗ gap
                          ElevatedButton(
                            onPressed: () => showSnack(context, "Added to Cart: ${product.title}"), // ржХрзНрж▓рж┐ржХ ржХрж░рж▓рзЗ snackbar
                            child: Text("Add to Cart"),       // ржмрж╛ржЯржирзЗрж░ ржЯрзЗржХрзНрж╕ржЯ
                            style: ElevatedButton.styleFrom(  // ржмрж╛ржЯржирзЗрж░ рж╕рзНржЯрж╛ржЗрж▓
                              backgroundColor: Colors.deepPurpleAccent,
                              foregroundColor: Colors.white,
                              minimumSize: Size(double.infinity, 35), // ржлрзБрж▓-ржУрзЯрж╛ржЗржб ржмрж╛ржЯржи
                            ),
                          )
                        ],
                      ),
                    )
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}


MaterialApp
тФФтФАтФА MyApp (StatelessWidget)
    тФФтФАтФА Scaffold
        тФЬтФАтФА AppBar (title: "Product Grid")
        тФФтФАтФА Body: Padding
            тФФтФАтФА GridView.builder
                тФФтФАтФА For each item:
                    тФФтФАтФА GestureDetector
                        тФФтФАтФА Card
                            тФФтФАтФА Column
                                тФЬтФАтФА ClipRRect
                                тФВ   тФФтФАтФА Image.network(product.imageUrl)
                                тФФтФАтФА Padding
                                    тФФтФАтФА Column
                                        тФЬтФАтФА Text(product.title)
                                        тФЬтФАтФА Text(product.description)
                                        тФФтФАтФА ElevatedButton (Add to Cart)

ЁЯФН ржПржЗ ржХрзЛржб ржжрж┐рзЯрзЗ ржХрзА ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ (рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж░рзНржгржирж╛):
ржПржЗ ржХрзЛржбржЯрж┐ ржПржХржЯрж┐ Flutter ржЕрзНржпрж╛ржк рждрзИрж░рж┐ ржХрж░рзЗ ржпрзЗржЦрж╛ржирзЗ рзлржЯрж┐ ржкржгрзНржпрзЗрж░ ржбрзЗржЯрж╛ (Product) ржПржХржЯрж┐ рж▓рж┐рж╕рзНржЯрзЗ рж░рж╛ржЦрж╛ рж╣рзЯрзЗржЫрзЗ ржПржмржВ GridView.builder ржжрж┐рзЯрзЗ рж╕рзЗржЗ ржкрзНрж░рзЛржбрж╛ржХрзНржЯржЧрзБрж▓рзЛржХрзЗ ржПржХржЯрж┐ 2-column ржЧрзНрж░рж┐ржбрзЗ UI рж╣рж┐рж╕рзЗржмрзЗ ржжрзЗржЦрж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред ржкрзНрж░рждрж┐ржЯрж┐ ржЧрзНрж░рж┐ржб ржЖржЗржЯрзЗржорзЗ ржЖржЫрзЗ: ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржЗржорзЗржЬ, ржирж╛ржо, ржмрж░рзНржгржирж╛ ржУ ржПржХржЯрж┐ "Add to Cart" ржмрж╛ржЯржиред ржЗржЙржЬрж╛рж░ ржпржжрж┐ ржкрзБрж░рзЛ ржХрж╛рж░рзНржб ржмрж╛ ржмрж╛ржЯржирзЗ ржЯрзНржпрж╛ржк ржХрж░рзЗ, рждрж╛рж╣рж▓рзЗ Snackbar ржжрж┐рзЯрзЗ рж╕ржВрж╢рзНрж▓рж┐рж╖рзНржЯ ржмрж╛рж░рзНрждрж╛ ржжрзЗржЦрж╛ржирзЛ рж╣рзЯред

тЬЕ рж╢рзЗржЦрж╛рж░ ржорзВрж▓ ржкрзЯрзЗржирзНржЯ:
Custom class (Product)

GridView.builder ржПрж░ ржмрзНржпржмрж╣рж╛рж░

GestureDetector ржжрж┐рзЯрзЗ ржЯрзНржпрж╛ржк ржбрж┐ржЯрзЗржХрж╢ржи

Snackbar ржжрзЗржЦрж╛ржирзЛрж░ ржкржжрзНржзрждрж┐

Reusable UI design using Card + Column + Network image + Button

рждрзБржорж┐ ржЪрж╛ржЗрж▓рзЗ ржПржЗ ржХрзЛржбрзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржЖрж░ржУ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржЕрзНржпрж╛ржк, ржЗ-ржХржорж╛рж░рзНрж╕ UI ржмрж╛ рж░рж┐ржЗржЙржЬрзЗржмрж▓ ржХржорзНржкрзЛржирзЗржирзНржЯ ржмрж╛ржирж╛рждрзЗ ржкрж╛рж░рзЛред
......................................................................................


DRY Principle ржорж╛ржирзЗ рж╣рж▓рзЛ:

"DonтАЩt Repeat Yourself"
ржЕрж░рзНржерж╛рзО тАФ ржПржХржЗ ржХрзЛржб ржмрж╛ рж▓ржЬрж┐ржХ ржмрж╛рж░ржмрж╛рж░ ржирж╛ рж▓рж┐ржЦрзЗ, reusable ржХрж░рзЗ рж▓рж┐ржЦрждрзЗ рж╣ржмрзЗ ржпрж╛рждрзЗ ржкрзНрж░ржЬрзЗржХрзНржЯрзЗ maintainability, scalability & readability ржмрж╛рзЬрзЗред

ЁЯФе DRY Principle ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ Flutter / Dart-ржП ржпрзЗржХрзЛржирзЛ ржЬрж┐ржирж┐рж╕ Reuse ржХрж░рж╛рж░ ржЙржкрж╛рзЯ:
тЬЕ 1. Widget Reuse тАУ UI ржмрж╛рж░ржмрж╛рж░ ржмрзНржпржмрж╣рж╛рж░
ЁЯФ╗ ржЙржжрж╛рж╣рж░ржг:
dart
Copy
Edit
class MyCustomButton extends StatelessWidget {
  final String label;
  final VoidCallback onPressed;

  MyCustomButton({required this.label, required this.onPressed});

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: onPressed,
      child: Text(label),
    );
  }
}
ЁЯзк ржпрзЗржЦрж╛ржирзЗ ржЦрзБрж╢рж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ:
dart
Copy
Edit
MyCustomButton(
  label: "Submit",
  onPressed: () => print("Clicked"),
),
тЬЕ 2. Reusable Function тАУ рж╕рж╛ржзрж╛рж░ржг ржХрж╛ржЬржЧрзБрж▓рзЛ ржПржХржмрж╛рж░рзЗ рж▓рж┐ржЦрзЛ
ЁЯФ╗ ржЙржжрж╛рж╣рж░ржг:
dart
Copy
Edit
void showMySnackbar(String message, BuildContext context) {
  ScaffoldMessenger.of(context).showSnackBar(
    SnackBar(content: Text(message)),
  );
}
ЁЯзк ржмрзНржпржмрж╣рж╛рж░:
dart
Copy
Edit
onTap: () => showMySnackbar("Hello!", context),
тЬЕ 3. Style / Theme Reuse
ржПржХржЗ TextStyle ржмрж╛ ButtonStyle ржмрж╛рж░ржмрж╛рж░ ржирж╛ рж▓рж┐ржЦрзЗ ржПржХржЯрж╛ ржлрж╛ржЗрж▓ ржмрж╛ constant ржмрж╛ржирж┐рзЯрзЗ рж░рж╛ржЦрзЛред

dart
Copy
Edit
const myTextStyle = TextStyle(fontSize: 18, color: Colors.blue);
ЁЯзк ржмрзНржпржмрж╣рж╛рж░:
dart
Copy
Edit
Text("Hello", style: myTextStyle)
тЬЕ 4. Constants & Config Reuse
Hardcoded string, API URL, color, etc ржПржХ ржЬрж╛рзЯржЧрж╛рзЯ рж░рзЗржЦрзЛ:

dart
Copy
Edit
class AppConfig {
  static const apiUrl = "https://api.example.com";
  static const defaultPadding = 16.0;
}
ЁЯзк ржмрзНржпржмрж╣рж╛рж░:
dart
Copy
Edit
print(AppConfig.apiUrl);
тЬЕ 5. Mixin / Inheritance / Abstract class (OOP Concepts for DRY)
ЁЯФ╗ Example:
dart
Copy
Edit
mixin Logger {
  void log(String msg) => print("Log: $msg");
}

class MyService with Logger {
  void fetchData() {
    log("Fetching data...");
  }
}
тЬЕ 6. Extension Method тАУ Dart-ржП custom method ржпрзБржХрзНржд ржХрж░рзЛ
ЁЯФ╗ Example:
dart
Copy
Edit
extension MyStringUtils on String {
  String capitalize() {
    if (this.isEmpty) return this;
    return this[0].toUpperCase() + substring(1);
  }
}
ЁЯзк ржмрзНржпржмрж╣рж╛рж░:
dart
Copy
Edit
print("hello".capitalize());  // Output: Hello
тЬЕ 7. Custom Form Validator Reuse
dart
Copy
Edit
String? validateEmail(String? value) {
  if (value == null || !value.contains('@')) return 'Invalid email';
  return null;
}
тЬЕ 8. Reusable BottomSheet / Dialog / Toast
dart
Copy
Edit
void showConfirmDialog(BuildContext context, String message) {
  showDialog(
    context: context,
    builder: (_) => AlertDialog(
      content: Text(message),
      actions: [TextButton(onPressed: () => Navigator.pop(context), child: Text("OK"))],
    ),
  );
}
тЬЕ 9. Reusable Grid / List Items
ржПржХржмрж╛рж░ ржмржХрзНрж╕ ржбрж┐ржЬрж╛ржЗржи ржХрж░рзЛ, рждрж╛рж░ржкрж░ List/Grid ржПрж░ ржнрж┐рждрж░рзЗ рж╢рзБржзрзБ data loop ржХрж░рзЗ inject ржХрж░рзЛред

тЬЕ 10. Service Layer / Repository Pattern
Backend call, API hit, Auth, Database тАФ ржПрж╕ржмрзЗрж░ ржЬржирзНржп ржЖрж▓рж╛ржжрж╛ рж╕рж╛рж░рзНржнрж┐рж╕ class ржмрж╛ржирж╛ржУред


class ApiService {
  Future<void> fetchData() async {
    // API logic here
  }
}
ЁЯза Bonus: DRY Principle ржмрзНржпржмрж╣рж╛рж░рзЗрж░ рж╕рзБржмрж┐ржзрж╛
рж╕рзБржмрж┐ржзрж╛	ржмрзНржпрж╛ржЦрзНржпрж╛
Maintainable	ржПржХ ржЬрж╛ржпрж╝ржЧрж╛ ржерзЗржХрзЗ ржХрзЛржб ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ ржпрж╛ржпрж╝
Clean Code	ржХрзЛржб ржкрж░рж┐рж╖рзНржХрж╛рж░ ржУ ржЫрзЛржЯ рж╣рзЯ
Less Bug	ржПржХржЯрж╛ржЗ рж▓ржЬрж┐ржХ, рждрж╛ржЗ ржХржо ржнрзБрж▓ рж╣рзЯ
Fast Development	ржмрж╛рж░ржмрж╛рж░ ржПржХржЗ ржЬрж┐ржирж┐рж╕ рж▓рж┐ржЦрждрзЗ рж╣рзЯ ржирж╛

тЬЕ рж╢рзЗрж╖ ржХржерж╛
DRY ржорж╛ржирзЗ рж╢рзБржзрзБ copy-paste ржПржбрж╝рж╛ржирзЛ ржирж╛, ржмрж░ржВ:

тЬЕ Smartly reusable architecture ржмрж╛ржирж╛ржирзЛ тАФ ржпрзЗржи future ржП ржмржбрж╝ app maintain ржХрж░рж╛ рж╕рж╣ржЬ рж╣ржпрж╝ред