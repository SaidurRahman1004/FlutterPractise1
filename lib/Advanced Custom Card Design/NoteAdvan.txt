



///Step 6.24: Flutter GridView - Advanced Custom Card Design

Step 6.24: Flutter Stack Layout тАУ UI Overlapping + Layering
import 'package:flutter/material.dart';                         // Flutter ржПрж░ Material design UI components ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп import

void main() {
  runApp(MaterialApp(                                         // ржЕрзНржпрж╛ржк ржЪрж╛рж▓рзБ ржХрж░рж╛рж░ ржЬржирзНржп MaterialApp widget ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ
    home: MyApp(),                                            // ржЕрзНржпрж╛ржкрзЗрж░ ржкрзНрж░ржержо рж╕рзНржХрзНрж░рж┐ржи рж╣рж┐рж╕рзЗржмрзЗ MyApp widget ржмрзНржпржмрж╣рж╛рж░
  ));
}

class Product {                                               // ржПржХржЯрж┐ custom class ржпрзЗржЯрж╛ ржПржХржЯрж┐ ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржбрзЗржЯрж╛ ржзрж╛рж░ржг ржХрж░рзЗ
  final String title;                                         // ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржирж╛ржо
  final String description;                                   // ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржмрж░рзНржгржирж╛
  final String imageUrl;                                      // ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржЗржорзЗржЬ URL

  Product(this.title, this.description, this.imageUrl);       // ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░: ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ рждрж┐ржиржЯрж┐ рждржерзНржп рж╕рзЗржЯ ржХрж░рзЗ
}

class MyApp extends StatelessWidget {
  final List<Product> productList = [                         // рзлржЯрж┐ ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ рж▓рж┐рж╕рзНржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ
    Product("iPhone 15", "Apple Smartphone", "https://i.postimg.cc/jjKRZgRq/profile-pic-1.png"),
    Product("MacBook", "Apple Laptop", "https://i.postimg.cc/bNZdjVSY/o1.jpg"),
    Product("Headphone", "Wireless", "https://i.postimg.cc/9XzZ1h7q/headphone.jpg"),
    Product("Smartwatch", "Fitness Tracker", "https://i.postimg.cc/Y2kYj9wh/smartwatch.jpg"),
    Product("Camera", "DSLR", "https://i.postimg.cc/qvRJSPVN/camera.jpg"),
  ];

  showSnack(context, msg) {                                   // ржПржХржЯрж┐ ржлрж╛ржВрж╢ржи: рж╕рзНржХрзНрж░рж┐ржирзЗ snackbar ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(msg)),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(                                          // Scaffold: ржорзВрж▓ рж╕рзНржХрзНрж░рж┐ржирзЗрж░ layout рждрзИрж░рж┐ ржХрж░рзЗ
      appBar: AppBar(                                         // AppBar: ржЙржкрж░рзЗрж░ ржЯрж╛ржЗржЯрзЗрж▓ ржмрж╛рж░рзЗрж░ ржЬржирзНржп
        title: Text("Product Grid"),
        backgroundColor: Colors.deepPurple,                   // AppBar ржПрж░ ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб рж░ржЩ
      ),
      body: Padding(
        padding: const EdgeInsets.all(10),                    // ржЪрж╛рж░ржкрж╛рж╢рзЗ 10px padding
        child: GridView.builder(                              // ржПржХржЯрж┐ grid view рждрзИрж░рж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ржпрж╛ dynamically item ржжрзЗржЦрж╛рзЯ
          itemCount: productList.length,                      // ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж▓рж┐рж╕рзНржЯрзЗрж░ total item рж╕ржВржЦрзНржпрж╛
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,                                // ржкрзНрж░рждрж┐ рж░рзЛ-рждрзЗ рзиржЯрж┐ ржЖржЗржЯрзЗржо ржерж╛ржХржмрзЗ
            crossAxisSpacing: 10,                             // ржжрзБржЗ grid item ржПрж░ ржорж╛ржЭрзЗ horizontal gap
            mainAxisSpacing: 10,                              // ржжрзБржЗ grid item ржПрж░ ржорж╛ржЭрзЗ vertical gap
            childAspectRatio: 0.75,                           // ржкрзНрж░рждрж┐ржЯрж┐ ржЖржЗржЯрзЗржорзЗрж░ width:height ржЕржирзБржкрж╛ржд
          ),
          itemBuilder: (context, index) {                     // ржкрзНрж░рждрж┐ржЯрж┐ grid item рждрзИрж░рж┐ ржХрж░рж╛рж░ ржЬржирзНржп builder
            final product = productList[index];               // ржмрж░рзНрждржорж╛ржи index ржЕржирзБржпрж╛рзЯрзА product ржбрзЗржЯрж╛ ржмрзЗрж░ ржХрж░рж╛
            return GestureDetector(                           // GestureDetector: ржХрзНрж▓рж┐ржХ ржбрж┐ржЯрзЗржХрзНржЯ ржХрж░рж╛рж░ ржЬржирзНржп
              onTap: () => showSnack(context, "${product.title} Clicked!"),  // ржХрзНрж▓рж┐ржХ ржХрж░рж▓рзЗ snackbar ржжрзЗржЦрж╛рзЯ
              child: Card(                                    // ржкрзНрж░рждрж┐ржЯрж┐ ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ ржХрж╛рж░рзНржб UI
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),    // ржХрж╛рж░рзНржбрзЗрж░ ржХрзЛржг ржЧрзЛрж▓ ржХрж░рж╛
                ),
                elevation: 5,                                 // ржХрж╛рж░рзНржбрзЗрж░ ржЫрж╛рзЯрж╛
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    ClipRRect(                                // ржЗржорзЗржЬрзЗрж░ ржЙржкрж░рзЗрж░ ржжрж┐ржХрзЗрж░ ржХрзЛржг ржЧрзЛрж▓ ржХрж░рж╛рж░ ржЬржирзНржп
                      borderRadius: BorderRadius.vertical(
                        top: Radius.circular(15),
                      ),
                      child: Image.network(                   // ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржЗржорзЗржЬ рж▓рзЛржб ржХрж░рж╛
                        product.imageUrl,
                        height: 100,
                        width: double.infinity,
                        fit: BoxFit.cover,                    // ржЗржорзЗржЬ container ржПрж░ ржкрзБрж░рзЛ ржЬрж╛рзЯржЧрж╛ ржХржнрж╛рж░ ржХрж░ржмрзЗ
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.all(8),       // ржХрж╛рж░рзНржбрзЗрж░ ржнрж┐рждрж░рзЗрж░ content ржПрж░ ржЬржирзНржп padding
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(product.title,                 // ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржирж╛ржо ржжрзЗржЦрж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
                              style: TextStyle(fontWeight: FontWeight.bold)),
                          SizedBox(height: 5),                // ржирж╛ржо ржУ description ржПрж░ ржорж╛ржЭрзЗ gap
                          Text(product.description,           // ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржмрж░рзНржгржирж╛
                              style: TextStyle(color: Colors.grey[700])),
                          SizedBox(height: 10),               // ржмрж░рзНржгржирж╛ ржУ ржмрж╛ржЯржирзЗрж░ ржорж╛ржЭрзЗ gap
                          ElevatedButton(
                            onPressed: () => showSnack(context, "Added to Cart: ${product.title}"), // ржХрзНрж▓рж┐ржХ ржХрж░рж▓рзЗ snackbar
                            child: Text("Add to Cart"),       // ржмрж╛ржЯржирзЗрж░ ржЯрзЗржХрзНрж╕ржЯ
                            style: ElevatedButton.styleFrom(  // ржмрж╛ржЯржирзЗрж░ рж╕рзНржЯрж╛ржЗрж▓
                              backgroundColor: Colors.deepPurpleAccent,
                              foregroundColor: Colors.white,
                              minimumSize: Size(double.infinity, 35), // ржлрзБрж▓-ржУрзЯрж╛ржЗржб ржмрж╛ржЯржи
                            ),
                          )
                        ],
                      ),
                    )
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}


MaterialApp
тФФтФАтФА MyApp (StatelessWidget)
    тФФтФАтФА Scaffold
        тФЬтФАтФА AppBar (title: "Product Grid")
        тФФтФАтФА Body: Padding
            тФФтФАтФА GridView.builder
                тФФтФАтФА For each item:
                    тФФтФАтФА GestureDetector
                        тФФтФАтФА Card
                            тФФтФАтФА Column
                                тФЬтФАтФА ClipRRect
                                тФВ   тФФтФАтФА Image.network(product.imageUrl)
                                тФФтФАтФА Padding
                                    тФФтФАтФА Column
                                        тФЬтФАтФА Text(product.title)
                                        тФЬтФАтФА Text(product.description)
                                        тФФтФАтФА ElevatedButton (Add to Cart)

ЁЯФН ржПржЗ ржХрзЛржб ржжрж┐рзЯрзЗ ржХрзА ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ (рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж░рзНржгржирж╛):
ржПржЗ ржХрзЛржбржЯрж┐ ржПржХржЯрж┐ Flutter ржЕрзНржпрж╛ржк рждрзИрж░рж┐ ржХрж░рзЗ ржпрзЗржЦрж╛ржирзЗ рзлржЯрж┐ ржкржгрзНржпрзЗрж░ ржбрзЗржЯрж╛ (Product) ржПржХржЯрж┐ рж▓рж┐рж╕рзНржЯрзЗ рж░рж╛ржЦрж╛ рж╣рзЯрзЗржЫрзЗ ржПржмржВ GridView.builder ржжрж┐рзЯрзЗ рж╕рзЗржЗ ржкрзНрж░рзЛржбрж╛ржХрзНржЯржЧрзБрж▓рзЛржХрзЗ ржПржХржЯрж┐ 2-column ржЧрзНрж░рж┐ржбрзЗ UI рж╣рж┐рж╕рзЗржмрзЗ ржжрзЗржЦрж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред ржкрзНрж░рждрж┐ржЯрж┐ ржЧрзНрж░рж┐ржб ржЖржЗржЯрзЗржорзЗ ржЖржЫрзЗ: ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржЗржорзЗржЬ, ржирж╛ржо, ржмрж░рзНржгржирж╛ ржУ ржПржХржЯрж┐ "Add to Cart" ржмрж╛ржЯржиред ржЗржЙржЬрж╛рж░ ржпржжрж┐ ржкрзБрж░рзЛ ржХрж╛рж░рзНржб ржмрж╛ ржмрж╛ржЯржирзЗ ржЯрзНржпрж╛ржк ржХрж░рзЗ, рждрж╛рж╣рж▓рзЗ Snackbar ржжрж┐рзЯрзЗ рж╕ржВрж╢рзНрж▓рж┐рж╖рзНржЯ ржмрж╛рж░рзНрждрж╛ ржжрзЗржЦрж╛ржирзЛ рж╣рзЯред

тЬЕ рж╢рзЗржЦрж╛рж░ ржорзВрж▓ ржкрзЯрзЗржирзНржЯ:
Custom class (Product)

GridView.builder ржПрж░ ржмрзНржпржмрж╣рж╛рж░

GestureDetector ржжрж┐рзЯрзЗ ржЯрзНржпрж╛ржк ржбрж┐ржЯрзЗржХрж╢ржи

Snackbar ржжрзЗржЦрж╛ржирзЛрж░ ржкржжрзНржзрждрж┐

Reusable UI design using Card + Column + Network image + Button

рждрзБржорж┐ ржЪрж╛ржЗрж▓рзЗ ржПржЗ ржХрзЛржбрзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржЖрж░ржУ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржЕрзНржпрж╛ржк, ржЗ-ржХржорж╛рж░рзНрж╕ UI ржмрж╛ рж░рж┐ржЗржЙржЬрзЗржмрж▓ ржХржорзНржкрзЛржирзЗржирзНржЯ ржмрж╛ржирж╛рждрзЗ ржкрж╛рж░рзЛред
......................................................................................


DRY Principle ржорж╛ржирзЗ рж╣рж▓рзЛ:

"DonтАЩt Repeat Yourself"
ржЕрж░рзНржерж╛рзО тАФ ржПржХржЗ ржХрзЛржб ржмрж╛ рж▓ржЬрж┐ржХ ржмрж╛рж░ржмрж╛рж░ ржирж╛ рж▓рж┐ржЦрзЗ, reusable ржХрж░рзЗ рж▓рж┐ржЦрждрзЗ рж╣ржмрзЗ ржпрж╛рждрзЗ ржкрзНрж░ржЬрзЗржХрзНржЯрзЗ maintainability, scalability & readability ржмрж╛рзЬрзЗред

ЁЯФе DRY Principle ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ Flutter / Dart-ржП ржпрзЗржХрзЛржирзЛ ржЬрж┐ржирж┐рж╕ Reuse ржХрж░рж╛рж░ ржЙржкрж╛рзЯ:
тЬЕ 1. Widget Reuse тАУ UI ржмрж╛рж░ржмрж╛рж░ ржмрзНржпржмрж╣рж╛рж░
ЁЯФ╗ ржЙржжрж╛рж╣рж░ржг:
dart
Copy
Edit
class MyCustomButton extends StatelessWidget {
  final String label;
  final VoidCallback onPressed;

  MyCustomButton({required this.label, required this.onPressed});

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: onPressed,
      child: Text(label),
    );
  }
}
ЁЯзк ржпрзЗржЦрж╛ржирзЗ ржЦрзБрж╢рж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ:
dart
Copy
Edit
MyCustomButton(
  label: "Submit",
  onPressed: () => print("Clicked"),
),
тЬЕ 2. Reusable Function тАУ рж╕рж╛ржзрж╛рж░ржг ржХрж╛ржЬржЧрзБрж▓рзЛ ржПржХржмрж╛рж░рзЗ рж▓рж┐ржЦрзЛ
ЁЯФ╗ ржЙржжрж╛рж╣рж░ржг:
dart
Copy
Edit
void showMySnackbar(String message, BuildContext context) {
  ScaffoldMessenger.of(context).showSnackBar(
    SnackBar(content: Text(message)),
  );
}
ЁЯзк ржмрзНржпржмрж╣рж╛рж░:
dart
Copy
Edit
onTap: () => showMySnackbar("Hello!", context),
тЬЕ 3. Style / Theme Reuse
ржПржХржЗ TextStyle ржмрж╛ ButtonStyle ржмрж╛рж░ржмрж╛рж░ ржирж╛ рж▓рж┐ржЦрзЗ ржПржХржЯрж╛ ржлрж╛ржЗрж▓ ржмрж╛ constant ржмрж╛ржирж┐рзЯрзЗ рж░рж╛ржЦрзЛред

dart
Copy
Edit
const myTextStyle = TextStyle(fontSize: 18, color: Colors.blue);
ЁЯзк ржмрзНржпржмрж╣рж╛рж░:
dart
Copy
Edit
Text("Hello", style: myTextStyle)
тЬЕ 4. Constants & Config Reuse
Hardcoded string, API URL, color, etc ржПржХ ржЬрж╛рзЯржЧрж╛рзЯ рж░рзЗржЦрзЛ:

dart
Copy
Edit
class AppConfig {
  static const apiUrl = "https://api.example.com";
  static const defaultPadding = 16.0;
}
ЁЯзк ржмрзНржпржмрж╣рж╛рж░:
dart
Copy
Edit
print(AppConfig.apiUrl);
тЬЕ 5. Mixin / Inheritance / Abstract class (OOP Concepts for DRY)
ЁЯФ╗ Example:
dart
Copy
Edit
mixin Logger {
  void log(String msg) => print("Log: $msg");
}

class MyService with Logger {
  void fetchData() {
    log("Fetching data...");
  }
}
тЬЕ 6. Extension Method тАУ Dart-ржП custom method ржпрзБржХрзНржд ржХрж░рзЛ
ЁЯФ╗ Example:
dart
Copy
Edit
extension MyStringUtils on String {
  String capitalize() {
    if (this.isEmpty) return this;
    return this[0].toUpperCase() + substring(1);
  }
}
ЁЯзк ржмрзНржпржмрж╣рж╛рж░:
dart
Copy
Edit
print("hello".capitalize());  // Output: Hello
тЬЕ 7. Custom Form Validator Reuse
dart
Copy
Edit
String? validateEmail(String? value) {
  if (value == null || !value.contains('@')) return 'Invalid email';
  return null;
}
тЬЕ 8. Reusable BottomSheet / Dialog / Toast
dart
Copy
Edit
void showConfirmDialog(BuildContext context, String message) {
  showDialog(
    context: context,
    builder: (_) => AlertDialog(
      content: Text(message),
      actions: [TextButton(onPressed: () => Navigator.pop(context), child: Text("OK"))],
    ),
  );
}
тЬЕ 9. Reusable Grid / List Items
ржПржХржмрж╛рж░ ржмржХрзНрж╕ ржбрж┐ржЬрж╛ржЗржи ржХрж░рзЛ, рждрж╛рж░ржкрж░ List/Grid ржПрж░ ржнрж┐рждрж░рзЗ рж╢рзБржзрзБ data loop ржХрж░рзЗ inject ржХрж░рзЛред

тЬЕ 10. Service Layer / Repository Pattern
Backend call, API hit, Auth, Database тАФ ржПрж╕ржмрзЗрж░ ржЬржирзНржп ржЖрж▓рж╛ржжрж╛ рж╕рж╛рж░рзНржнрж┐рж╕ class ржмрж╛ржирж╛ржУред


class ApiService {
  Future<void> fetchData() async {
    // API logic here
  }
}
ЁЯза Bonus: DRY Principle ржмрзНржпржмрж╣рж╛рж░рзЗрж░ рж╕рзБржмрж┐ржзрж╛
рж╕рзБржмрж┐ржзрж╛	ржмрзНржпрж╛ржЦрзНржпрж╛
Maintainable	ржПржХ ржЬрж╛ржпрж╝ржЧрж╛ ржерзЗржХрзЗ ржХрзЛржб ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ ржпрж╛ржпрж╝
Clean Code	ржХрзЛржб ржкрж░рж┐рж╖рзНржХрж╛рж░ ржУ ржЫрзЛржЯ рж╣рзЯ
Less Bug	ржПржХржЯрж╛ржЗ рж▓ржЬрж┐ржХ, рждрж╛ржЗ ржХржо ржнрзБрж▓ рж╣рзЯ
Fast Development	ржмрж╛рж░ржмрж╛рж░ ржПржХржЗ ржЬрж┐ржирж┐рж╕ рж▓рж┐ржЦрждрзЗ рж╣рзЯ ржирж╛

тЬЕ рж╢рзЗрж╖ ржХржерж╛
DRY ржорж╛ржирзЗ рж╢рзБржзрзБ copy-paste ржПржбрж╝рж╛ржирзЛ ржирж╛, ржмрж░ржВ:

тЬЕ Smartly reusable architecture ржмрж╛ржирж╛ржирзЛ тАФ ржпрзЗржи future ржП ржмржбрж╝ app maintain ржХрж░рж╛ рж╕рж╣ржЬ рж╣ржпрж╝ред

.........................................................................................................................
///Step 6.25: Flutter Stack Layout тАУ UI Overlapping + Layering
.........................................................................................................................

ЁЯФ╖ Stack Widget ржХрж┐?
Stack рж╣рж▓рзЛ ржПржХржЯрж┐ Layout widget ржпрзЗржЯрж╛ ржПржХрж╛ржзрж┐ржХ widget-ржХрзЗ ржПржХржЯрж╛рж░ ржЙржкрж░ ржЖрж░рзЗржХржЯрж╛ (overlapping) layer-wise рж╕рж╛ржЬрж╛рзЯред
ржПржЯрж╛ ржарж┐ржХ ржпрзЗржи ржЫржмрж┐рж░ ржЙржкрж░ рж▓рзЗржЦрж╛ ржмрж╕рж╛ржирзЛ ржмрж╛ ржнрж┐ржбрж┐ржУ ржкрзНрж▓рзЗрзЯрж╛рж░рзЗ ржнрж┐ржбрж┐ржУрж░ ржЙржкрж░ Play ржмрж╛ржЯржи ржжрзЗржУрзЯрж╛ тАФ ржПржЗрж░ржХржо layout рждрзИрж░рж┐ ржХрж░рждрзЗ Stack ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯред

ЁЯФе Flutter Stack ржПрж░ Key Properties:
| Property       | Description                                                           |
| -------------- | --------------------------------------------------------------------- |
| `alignment`    | Stack ржПрж░ ржнрж┐рждрж░рзЗрж░ рж╕ржХрж▓ widget ржХрзЛржерж╛рзЯ ржерж╛ржХржмрзЗ рждрж╛ ржарж┐ржХ ржХрж░рзЗ                     |
| `fit`          | Children widget ржЧрзБрж▓рзЛ Stack ржПрж░ ржЖржХрж╛рж░рзЗ adjust ржХрж░ржмрзЗ ржХрж┐ржирж╛                  |
| `overflow`     | (deprecated) ржкрзБрж░рж╛рждржи ржнрж╛рж░рзНрж╕ржирзЗ ржЫрж┐рж▓, ржПржЦржи clipBehavior ржжрж┐рзЯрзЗ control ржХрж░рж╛ рж╣рзЯ |
| `clipBehavior` | Stack ржПрж░ ржмрж╛ржЗрж░рзЗ widget ржпрж╛ржмрзЗ ржХрж┐ржирж╛ рждрж╛ ржирж┐рзЯржирзНрждрзНрж░ржг ржХрж░рзЗ                      |
ржХрж░рзЗ

ЁЯзн Stack vs Column vs Row?

| Feature      | Stack                | Column        | Row               |
| ------------ | -------------------- | ------------- | ----------------- |
| Layout       | Overlap              | Top to bottom | Left to right     |
| Flex Support | тЭМ                    | тЬЕ             | тЬЕ                 |
| Use-case     | UI layering, overlay | Forms, Lists  | Button Rows, Menu |

ржирж┐ржЪрзЗрж░ ржХрзЛржбрзЗ ржкрзНрж░рждрж┐ржЯрж┐ ржЕржВрж╢рзЗрж░ ржкрж╛рж╢рзЗ рж╕рж╣ржЬ ржнрж╛рж╖рж╛рзЯ рждрж╛рж░ ржХрж╛ржЬ ржмрж░рзНржгржирж╛ ржХрж░рж╛ рж╣рж▓рзЛред
import 'package:flutter/material.dart';

class StackExample extends StatelessWidget {         // ржПржХржЯрж┐ StatelessWidget рждрзИрж░рж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ, ржпрж╛рж░ ржЕржмрж╕рзНржерж╛ ржкрж░рж┐ржмрж░рзНрждржи рж╣рзЯ ржирж╛ред
  const StackExample({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(                                    // ржЕрзНржпрж╛ржкрзЗрж░ ржорзВрж▓ ржХрж╛ржарж╛ржорзЛ рждрзИрж░рж┐ ржХрж░рзЗ (ржпрзЗржоржи: appBar, body)ред
      appBar: AppBar(title: Text("Stack Layout Example"), backgroundColor: Colors.deepPurple), // ржЕрзНржпрж╛ржкрзЗрж░ ржЙржкрж░рзЗрж░ ржмрж╛рж░ред
      body: Center(                                     // ржнрзЗрждрж░рзЗрж░ рж╕ржм ржХржиржЯрзЗржирзНржЯржХрзЗ рж╕рзНржХрзНрж░рж┐ржирзЗрж░ ржорж╛ржЭржЦрж╛ржирзЗ ржЖржирзЗред
        child: Stack(                                   // ржЙржЗржЬрзЗржЯржЧрзБрж▓рзЛржХрзЗ ржПржХржЯрж╛рж░ ржУржкрж░ ржЖрж░рзЗржХржЯрж╛ рж╕рзНрждрж░ (Layer) рж╣рж┐рж╕рзЗржмрзЗ рж░рж╛ржЦрзЗред
          alignment: Alignment.center,                  // рж╕рзНржЯрзНржпрж╛ржХрзЗрж░ ржнрзЗрждрж░рзЗрж░ рж╕ржм ржЖржЗржЯрзЗржоржХрзЗ ржорж╛ржЭржЦрж╛ржирзЗ ржЖржирзЗред
          children: [
            // ЁЯФ╣ рж╕рзНрждрж░ рзз: ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржЫржмрж┐
            Container(                                  // ржПржХржЯрж┐ ржХржирзНржЯрзЗржЗржирж╛рж░ ржпрж╛ ржЫржмрж┐ржЯрж┐ржХрзЗ ржзрж╛рж░ржг ржХрж░ржмрзЗред
              height: 250,                              // ржХржирзНржЯрзЗржЗржирж╛рж░рзЗрж░ ржЙржЪрзНржЪрждрж╛ред
              width: 350,                               // ржХржирзНржЯрзЗржЗржирж╛рж░рзЗрж░ ржкрзНрж░рж╕рзНржеред
              decoration: BoxDecoration(                  // ржХржирзНржЯрзЗржЗржирж╛рж░ржХрзЗ ржбрж┐ржЬрж╛ржЗржи ржХрж░рж╛рж░ ржЬржирзНржпред
                borderRadius: BorderRadius.circular(20),  // ржХржирзНржЯрзЗржЗржирж╛рж░рзЗрж░ ржХрзЛржгрж╛ржЧрзБрж▓рзЛ ржЧрзЛрж▓рж╛ржХрж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред
                image: DecorationImage(                 // ржХржирзНржЯрзЗржЗржирж╛рж░рзЗрж░ ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржбрзЗ ржЫржмрж┐ ржпрзЛржЧ ржХрж░рж╛рж░ ржЬржирзНржпред
                  image: NetworkImage("https://images.unsplash.com/photo-1532298229144-0ec0c57515c7"), // ржЗржирзНржЯрж╛рж░ржирзЗржЯ ржерзЗржХрзЗ ржЫржмрж┐ рж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
                  fit: BoxFit.cover,                    // ржЫржмрж┐ржЯрж┐ ржпрзЗржи ржХржирзНржЯрзЗржЗржирж╛рж░рзЗрж░ ржкрзБрж░рзЛ ржЬрж╛рзЯржЧрж╛ ржЬрзБрзЬрзЗ ржерж╛ржХрзЗред
                ),
              ),
            ),

            // ЁЯФ╣ рж╕рзНрждрж░ рзи: ржЫржмрж┐рж░ ржУржкрж░ ржПржХржЯрж┐ рж╣рж╛рж▓ржХрж╛ ржХрж╛рж▓рзЛ ржЖрж╕рзНрждрж░ржг
            Container(
              height: 250,
              width: 350,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(20),
                color: Colors.black.withOpacity(0.3),   // ржПржХржЯрж┐ рж╣рж╛рж▓ржХрж╛ ржХрж╛рж▓рзЛ рж░ржЩрзЗрж░ ржЖрж╕рзНрждрж░ржг рждрзИрж░рж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ (рзйрзж% рж╕рзНржмржЪрзНржЫ)ред
              ),
            ),

            // ЁЯФ╣ рж╕рзНрждрж░ рзй: ржорж╛ржЭржЦрж╛ржирзЗрж░ рж▓рзЗржЦрж╛ ржУ ржмрж╛ржЯржи
            Column(                                     // ржЙржЗржЬрзЗржЯржЧрзБрж▓рзЛржХрзЗ ржЙрж▓рзНрж▓ржорзНржмржнрж╛ржмрзЗ (ржЙржкрж░рзЗ-ржирж┐ржЪрзЗ) рж╕рж╛ржЬрж╛ржирзЛрж░ ржЬржирзНржпред
              mainAxisAlignment: MainAxisAlignment.center, // Column-ржПрж░ ржЖржЗржЯрзЗржоржЧрзБрж▓рзЛржХрзЗ ржЙрж▓рзНрж▓ржорзНржмржнрж╛ржмрзЗ ржорж╛ржЭржЦрж╛ржирзЗ ржЖржирзЗред
              children: [
                Text(                                   // "Mountain Bike" рж▓рзЗржЦрж╛ржЯрж┐ ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржпред
                  "Mountain Bike",
                  style: TextStyle(
                    color: Colors.white,                // рж▓рзЗржЦрж╛рж░ рж░ржЩ рж╕рж╛ржжрж╛ред
                    fontSize: 24,                       // рж▓рзЗржЦрж╛рж░ ржлржирзНржЯ рж╕рж╛ржЗржЬред
                    fontWeight: FontWeight.bold,        // рж▓рзЗржЦрж╛ржЯрж┐ржХрзЗ ржмрзЛрж▓рзНржб ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред
                  ),
                ),
                SizedBox(height: 10),                     // ржжрзБржЯрж┐ ржЙржЗржЬрзЗржЯрзЗрж░ ржоржзрзНржпрзЗ рззрзж ржкрж┐ржХрзНрж╕рзЗрж▓ ржлрж╛ржБржХрж╛ ржЬрж╛рзЯржЧрж╛ рждрзИрж░рж┐ ржХрж░рзЗред
                ElevatedButton(                           // ржПржХржЯрж┐ ржмрж╛ржЯржи рждрзИрж░рж┐ ржХрж░рзЗред
                  onPressed: () {},                       // ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рж▓рзЗ ржХрзА рж╣ржмрзЗ рждрж╛ ржПржЦрж╛ржирзЗ рж▓рзЗржЦрж╛ рж╣рзЯ (ржПржЦржи ржлрж╛ржБржХрж╛)ред
                  style: ElevatedButton.styleFrom(backgroundColor: Colors.white, foregroundColor: Colors.black), // ржмрж╛ржЯржирзЗрж░ ржбрж┐ржЬрж╛ржЗржиред
                  child: Text("Buy Now"),                 // ржмрж╛ржЯржирзЗрж░ ржУржкрж░рзЗрж░ рж▓рзЗржЦрж╛ред
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

StatelessWidget (StackExample)
тФФтФА Scaffold
   тФЬтФА appBar: AppBar
   |  тФФтФА title: Text
   тФФтФА body: Center
      тФФтФА child: Stack
         тФФтФА children: [
            тФЬтФА ЁЯФ╣ Container (рж╕рзНрждрж░ рзз: ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржЫржмрж┐)
            |  тФФтФА decoration: BoxDecoration
            |     тФФтФА image: DecorationImage
            |        тФФтФА image: NetworkImage
            тФЬтФА ЁЯФ╣ Container (рж╕рзНрждрж░ рзи: ржХрж╛рж▓рзЛ ржЖрж╕рзНрждрж░ржг)
            |  тФФтФА decoration: BoxDecoration
            тФФтФА ЁЯФ╣ Column (рж╕рзНрждрж░ рзй: рж▓рзЗржЦрж╛ ржУ ржмрж╛ржЯржи)
               тФФтФА children: [
                  тФЬтФА Text
                  тФЬтФА SizedBox
                  тФФтФА ElevatedButton
                     тФФтФА child: Text
                  ]
            ]
 ..................................................................................................................

 bool allSelected = taskCompleted.every((t) => t);
.every() ржлрж╛ржВрж╢ржи ржЪрзЗржХ ржХрж░рзЗ рж▓рж┐рж╕рзНржЯрзЗрж░ рж╕ржм ржПрж▓рж┐ржорзЗржирзНржЯ рж╢рж░рзНржд ржкрзВрж░ржг ржХрж░ржЫрзЗ ржХрж┐ржирж╛ред

(t) => t ржорж╛ржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ ржПрж▓рж┐ржорзЗржирзНржЯ true ржХрж┐ржирж╛ред

ржЙржжрж╛рж╣рж░ржг:

[true, true, true].every((t) => t) тЖТ true (рж╕ржм true)

[true, false, true].every((t) => t) тЖТ false (ржХрж╛рж░ржг ржПржХржЯрж┐ false ржЖржЫрзЗ)
...................................................

ржкрзНрж░рж╢рзНржи рзз: NestedScrollView ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржорзВрж▓ ржХрж╛рж░ржг ржХрзА? ржХрзЛржи ржзрж░ржирзЗрж░ UI рж▓рзЗржЖржЙржЯрзЗ ржПржЯрж┐ ржмрж┐рж╢рзЗрж╖ржнрж╛ржмрзЗ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝?
NestedScrollView ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржорзВрж▓ ржХрж╛рж░ржг рж╣рж▓рзЛ ржПржХржЯрж┐ рж╕рзНржХрзНрж░рзЛрж▓ржпрзЛржЧрзНржп ржПрж▓рж╛ржХрж╛рж░ ржнрзЗрждрж░рзЗ ржЖрж░рзЗржХржЯрж┐ рж╕рзНржмрж╛ржзрзАржиржнрж╛ржмрзЗ рж╕рзНржХрзНрж░рзЛрж▓ржпрзЛржЧрзНржп ржПрж▓рж╛ржХрж╛ рждрзИрж░рж┐ ржХрж░рж╛ ржПржмржВ рждрж╛ржжрзЗрж░ рж╕рзНржХрзНрж░рзЛрж▓ ржЖржЪрж░ржгржХрзЗ рж╕ржоржирзНржмржпрж╝ ржХрж░рж╛ред

ржПржЯрж┐ ржмрж┐рж╢рзЗрж╖ржнрж╛ржмрзЗ рж╕рзЗржЗрж╕ржм UI рж▓рзЗржЖржЙржЯрзЗ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржпрзЗржЦрж╛ржирзЗ ржПржХржЯрж┐ ржХрж▓рж╛ржкрж╕рж┐ржмрж▓ AppBar (ржмрж╛ ржЕржирзНржп ржХрзЛржирзЛ ржХрж╛рж╕рзНржЯржо рж╣рзЗржбрж╛рж░) ржерж╛ржХрзЗ ржПржмржВ рждрж╛рж░ ржирж┐ржЪрзЗ ржЯрзНржпрж╛ржм (TabBar) ржерж╛ржХрзЗ, ржпрзЗржЦрж╛ржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ ржЯрзНржпрж╛ржмрзЗрж░ ржнрзЗрждрж░рзЗ ржЖрж▓рж╛ржжрж╛ ржЖрж▓рж╛ржжрж╛ рж╕рзНржХрзНрж░рзЛрж▓ржпрзЛржЧрзНржп ржХржиржЯрзЗржирзНржЯ ржерж╛ржХрзЗред ржпрзЗржоржи, ржПржХржЯрж┐ ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржкрзЗржЬ ржпрзЗржЦрж╛ржирзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рждржерзНржп ржЙржкрж░рзЗ ржерж╛ржХрзЗ ржПржмржВ ржирж┐ржЪрзЗ ржЯрзНржпрж╛ржм ржЖржХрж╛рж░рзЗ ржкрзЛрж╕рзНржЯ, ржЫржмрж┐, ржЗрждрзНржпрж╛ржжрж┐ ржЖрж▓рж╛ржжрж╛ржнрж╛ржмрзЗ рж╕рзНржХрзНрж░рзЛрж▓ ржХрж░рж╛ ржпрж╛рзЯред

ржкрзНрж░рж╢рзНржи рзи: SliverOverlapAbsorber ржУ SliverOverlapInjector
ржПржЗ ржжрзБржЯрж┐ ржЙржЗржЬрзЗржЯрзЗрж░ рж╕ржорзНржкрж░рзНржХ рж╣рж▓рзЛ ржжрж╛рждрж╛ ржУ ржЧрзНрж░рж╣рзАрждрж╛рж░ ржорждрзЛ ржПржмржВ ржПржжрзЗрж░ ржПржХрж╕рж╛ржерзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣рзЯ ржХрж╛рж░ржг NestedScrollView-ржПрж░ рж╣рзЗржбрж╛рж░ржЯрж┐ ржХрж▓рж╛ржкрж╕ рж╣рзЯрзЗ ржЫрзЛржЯ рж╣ржУрзЯрж╛рж░ ржкрж░ body-рж░ ржХржиржЯрзЗржирзНржЯ рж╣рзЗржбрж╛рж░рзЗрж░ ржирж┐ржЪрзЗ ржЪрж╛ржкрж╛ ржкрзЬрзЗ ржпрж╛рзЯред

SliverOverlapAbsorber: ржПржХрзЗ "ржжрж╛рждрж╛" ржмрж▓рж╛ ржпрж╛рзЯред ржПржЯрж┐ headerSliverBuilder-ржПрж░ ржнрзЗрждрж░рзЗ рж░рж╛ржЦрж╛ рж╣рзЯ ржПржмржВ ржПржЯрж┐ ржкрж░рж┐ржорж╛ржк ржХрж░рзЗ ржпрзЗ рж╣рзЗржбрж╛рж░ржЯрж┐ ржХрж▓рж╛ржкрж╕ рж╣ржУрзЯрж╛рж░ ржкрж░ body-рж░ ржХржиржЯрзЗржирзНржЯрзЗрж░ ржЙржкрж░рзЗ ржХрждржЯрж╛ ржЬрж╛рзЯржЧрж╛ (overlap) ржжржЦрж▓ ржХрж░рзЗ ржЖржЫрзЗред

SliverOverlapInjector: ржПржХрзЗ "ржЧрзНрж░рж╣рзАрждрж╛" ржмрж▓рж╛ ржпрж╛рзЯред ржПржЯрж┐ body-рж░ ржнрзЗрждрж░рзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ рж╕рзНржХрзНрж░рзЛрж▓ржпрзЛржЧрзНржп ржХржиржЯрзЗржирзНржЯрзЗрж░ (ржпрзЗржоржи TabBarView-ржПрж░ ржнрзЗрждрж░рзЗрж░ рж▓рж┐рж╕рзНржЯ) рж╢рзБрж░рзБрждрзЗ рж░рж╛ржЦрж╛ рж╣рзЯред ржПржЯрж┐ SliverOverlapAbsorber-ржПрж░ ржХрж╛ржЫ ржерзЗржХрзЗ рж╕рзЗржЗ ржУржнрж╛рж░рж▓рзНржпрж╛ржкрзЗрж░ рждржерзНржп ржирж┐рзЯрзЗ ржХржиржЯрзЗржирзНржЯрзЗрж░ рж╢рзБрж░рзБрждрзЗ ржПржХржЯрж┐ ржкрзНржпрж╛ржбрж┐ржВ (padding) ржпрзЛржЧ ржХрж░рзЗ ржжрзЗрзЯ, ржпрж╛рждрзЗ ржХржиржЯрзЗржирзНржЯ ржЖрж░ рж╣рзЗржбрж╛рж░рзЗрж░ ржирж┐ржЪрзЗ ржврж╛ржХрж╛ ржирж╛ ржкрзЬрзЗред

ржПржжрзЗрж░ ржПржХрж╕рж╛ржерзЗ ржмрзНржпржмрж╣рж╛рж░ ржирж╛ ржХрж░рж▓рзЗ ржЯрзНржпрж╛ржмрзЗрж░ ржнрзЗрждрж░рзЗрж░ рж▓рж┐рж╕рзНржЯрзЗрж░ ржкрзНрж░ржержо ржХрж┐ржЫрзБ ржЕржВрж╢ ржЕрзНржпрж╛ржк ржмрж╛рж░рзЗрж░ ржирж┐ржЪрзЗ ржЪрж▓рзЗ ржпрж╛ржмрзЗ ржПржмржВ ржжрзЗржЦрж╛ ржпрж╛ржмрзЗ ржирж╛ред

ржкрзНрж░рж╢рзНржи рзй: headerSliverBuilder ржПржмржВ body
headerSliverBuilder ржПржмржВ body-ржПрж░ ржоржзрзНржпрзЗ ржкрзНрж░ржзрж╛ржи ржкрж╛рж░рзНржержХрзНржп рж╣рж▓рзЛ ржПржжрзЗрж░ ржХржиржЯрзЗржирзНржЯрзЗрж░ ржзрж░ржи ржПржмржВ рж╕рзНржХрзНрж░рзЛрж▓ ржЖржЪрж░ржгред

headerSliverBuilder: ржПржЯрж┐ ржПржХржЯрж┐ "ржмрж╛ржЗрж░рзЗрж░" рж╕рзНржХрзНрж░рзЛрж▓ ржПрж▓рж╛ржХрж╛ рждрзИрж░рж┐ ржХрж░рзЗ ржПржмржВ ржПржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ sliver ржЙржЗржЬрзЗржЯ (ржпрзЗржоржи SliverAppBar, SliverList) ржЧрзНрж░рж╣ржг ржХрж░рзЗред ржПрж░ ржнрзЗрждрж░рзЗ ржерж╛ржХрж╛ ржЙржЗржЬрзЗржЯржЧрзБрж▓рзЛ ржкрзБрж░рзЛ NestedScrollView-ржПрж░ рж╕рж╛ржерзЗ ржПржХрж╕рж╛ржерзЗ рж╕рзНржХрзНрж░рзЛрж▓ ржХрж░рзЗред рж╕рж╛ржзрж╛рж░ржгржд, SliverAppBar ржПржЦрж╛ржирзЗржЗ рж░рж╛ржЦрж╛ рж╣ржпрж╝ред

body: ржПржЯрж┐ "ржнрзЗрждрж░рзЗрж░" рж╕рзНржХрзНрж░рзЛрж▓ ржПрж▓рж╛ржХрж╛ рждрзИрж░рж┐ ржХрж░рзЗ ржПржмржВ ржПржЯрж┐ ржПржХржЯрж┐ рж╕рж╛ржзрж╛рж░ржг ржЙржЗржЬрзЗржЯ (non-sliver) ржЧрзНрж░рж╣ржг ржХрж░рзЗред ржПрж░ ржнрзЗрждрж░рзЗ ржерж╛ржХрж╛ ржЙржЗржЬрзЗржЯржЧрзБрж▓рзЛрж░ ржирж┐ржЬрж╕рзНржм рж╕рзНржХрзНрж░рзЛрж▓рж┐ржВ ржерж╛ржХрзЗ, ржпрж╛ ржмрж╛ржЗрж░рзЗрж░ рж╕рзНржХрзНрж░рзЛрж▓ ржерзЗржХрзЗ ржЖрж▓рж╛ржжрж╛ред рж╕рж╛ржзрж╛рж░ржгржд, TabBarView (ржпрж╛рж░ ржкрзНрж░рждрж┐ржЯрж┐ ржЯрзНржпрж╛ржмрзЗрж░ ржнрзЗрждрж░рзЗ ржирж┐ржЬрж╕рзНржм рж╕рзНржХрзНрж░рзЛрж▓ржпрзЛржЧрзНржп рж▓рж┐рж╕рзНржЯ ржерж╛ржХрзЗ) ржПржЗ body ржкрзНрж░рзЛржкрж╛рж░рзНржЯрж┐рж░ ржнрзЗрждрж░рзЗ рж░рж╛ржЦрж╛ рж╣ржпрж╝ред
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ржкрзНрж░рж╢рзНржи рзз: ржПржХржЯрж┐ ржЙржЗржЬрзЗржЯрзЗрж░ ржЬржирзНржп ржЙржкрж▓ржмрзНржз ржЬрж╛ржпрж╝ржЧрж╛ ржЬрж╛ржирж╛рж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ LayoutBuilder ржПржмржВ MediaQuery.of(context).size ржПрж░ ржоржзрзНржпрзЗ ржорзВрж▓ ржкрж╛рж░рзНржержХрзНржп ржХрзА?

LayoutBuilder ржПржмржВ MediaQuery.of(context).size ржПрж░ ржоржзрзНржпрзЗ ржорзВрж▓ ржкрж╛рж░рзНржержХрзНржп рж╣рж▓рзЛ рждрж╛ржжрзЗрж░ ржкрж░рж┐ржорж╛ржкрзЗрж░ ржкрж░рж┐ржзрж┐ ржмрж╛ рж╕рзНржХрзЛржк (scope)ред

MediaQuery.of(context).size: ржПржЯрж┐ рж╕ржорзНржкрзВрж░рзНржг рж╕рзНржХрзНрж░рж┐ржи ржмрж╛ ржбрж┐ржнрж╛ржЗрж╕рзЗрж░ ржнрж┐ржЙржкрзЛрж░рзНржЯрзЗрж░ (viewport) ржкрзНрж░рж╕рзНрже (width) ржПржмржВ ржЙржЪрзНржЪрждрж╛ (height) рж╕ржорзНржкрж░рзНржХрзЗ рждржерзНржп ржжрзЗрзЯред ржПржЗ ржорж╛ржи ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЙржЗржЬрзЗржЯрзЗрж░ ржЕржмрж╕рзНржерж╛ржирзЗрж░ ржЙржкрж░ ржирж┐рж░рзНржнрж░ ржХрж░рзЗ ржирж╛; ржПржЯрж┐ ржкрзБрж░рзЛ ржЕрзНржпрж╛ржкрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ ржЧрзНрж▓рзЛржмрж╛рж▓ (global) ржорж╛ржиред ржпрзЗржоржи, ржПржХржЯрж┐ рзкрззрзз ржкрж┐ржХрзНрж╕рзЗрж▓ ржЪржУрзЬрж╛ ржорзЛржмрж╛ржЗрж▓ рж╕рзНржХрзНрж░рж┐ржирзЗ MediaQuery.of(context).size.width-ржПрж░ ржорж╛ржи рж╕ржм ржЬрж╛рзЯржЧрж╛рзЯ рзкрззрзз ржерж╛ржХржмрзЗред

LayoutBuilder: ржПржЯрж┐ рждрж╛рж░ ржкрзНржпрж╛рж░рзЗржирзНржЯ ржЙржЗржЬрзЗржЯ (parent widget) ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ ржЙржкрж▓ржмрзНржз ржЬрж╛рзЯржЧрж╛ ржмрж╛ рж╕рзАржорж╛ржмржжрзНржзрждрж╛ (constraints) рж╕ржорзНржкрж░рзНржХрзЗ рждржерзНржп ржжрзЗрзЯред ржПржЯрж┐ рж╕ржорзНржкрзВрж░рзНржг рж╕рзНржХрзНрж░рж┐ржирзЗрж░ ржЖржХрж╛рж░рзЗрж░ ржЙржкрж░ ржирж┐рж░рзНржнрж░ ржХрж░рзЗ ржирж╛, ржмрж░ржВ ржпрзЗ ржЙржЗржЬрзЗржЯрзЗрж░ ржнрзЗрждрж░рзЗ ржПржЯрж┐ рж░рж╛ржЦрж╛ рж╣рзЯрзЗржЫрзЗ, рж╕рзЗржЗ ржЙржЗржЬрзЗржЯржЯрж┐ рждрж╛ржХрзЗ ржХрждржЯрж╛ ржЬрж╛рзЯржЧрж╛ ржжрж┐ржЪрзНржЫрзЗ рждрж╛рж░ ржЙржкрж░ ржирж┐рж░рзНржнрж░ ржХрж░рзЗред ржпрзЗржоржи, ржЖржкржирж╛рж░ ResponsiveContactCard ржпржжрж┐ рзирзжрзж ржкрж┐ржХрзНрж╕рзЗрж▓ ржЪржУрзЬрж╛ ржПржХржЯрж┐ Container-ржПрж░ ржнрзЗрждрж░рзЗ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ LayoutBuilder-ржПрж░ constraints.maxWidth-ржПрж░ ржорж╛ржи рзирзжрзж рж╣ржмрзЗ, ржпржжрж┐ржУ ржкрзБрж░рзЛ рж╕рзНржХрзНрж░рж┐ржирзЗрж░ ржкрзНрж░рж╕рзНрже рж╣рзЯрждрзЛ ржЕржирзЗржХ ржмрзЗрж╢рж┐ред

рж╕ржВржХрзНрж╖рзЗржкрзЗ: MediaQuery ржкрзБрж░рзЛ рж╕рзНржХрзНрж░рж┐ржирзЗрж░ ржЖржХрж╛рж░ ржмрж▓рзЗ, ржЖрж░ LayoutBuilder рждрж╛рж░ ржкрзНржпрж╛рж░рзЗржирзНржЯрзЗрж░ ржжрзЗржУрзЯрж╛ ржЬрж╛рзЯржЧрж╛рж░ ржЖржХрж╛рж░ ржмрж▓рзЗред

ржкрзНрж░рж╢рзНржи рзи: LayoutBuilder-ржПрж░ builder ржлрж╛ржВрж╢ржирзЗ ржпрзЗ BoxConstraints ржЕржмржЬрзЗржХрзНржЯржЯрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝, рж╕рзЗржЯрж┐ ржерзЗржХрзЗ ржЖржорж░рж╛ ржорзВрж▓ржд ржХрзЛржи ржХрзЛржи рждржерзНржп ржЬрж╛ржирждрзЗ ржкрж╛рж░рж┐?

LayoutBuilder-ржПрж░ builder ржлрж╛ржВрж╢ржирзЗ ржкрж╛ржУрзЯрж╛ BoxConstraints ржЕржмржЬрзЗржХрзНржЯржЯрж┐ ржерзЗржХрзЗ ржЖржорж░рж╛ ржорзВрж▓ржд ржЪрж╛рж░ржЯрж┐ ржкрзНрж░ржзрж╛ржи рждржерзНржп ржЬрж╛ржирждрзЗ ржкрж╛рж░рж┐, ржпрж╛ ржЙржЗржЬрзЗржЯржЯрж┐рж░ ржЖржХрж╛рж░рзЗрж░ рж╕рзАржорж╛ржмржжрзНржзрждрж╛ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рзЗ:

minWidth: ржЙржЗржЬрзЗржЯржЯрж┐ рж╕рж░рзНржмржирж┐ржорзНржи ржХрждржЯрж╛ ржЪржУрзЬрж╛ рж╣рждрзЗ ржкрж╛рж░ржмрзЗред

maxWidth: ржЙржЗржЬрзЗржЯржЯрж┐ рж╕рж░рзНржмрзЛржЪрзНржЪ ржХрждржЯрж╛ ржЪржУрзЬрж╛ рж╣рждрзЗ ржкрж╛рж░ржмрзЗред (рж░рзЗрж╕ржкржирзНрж╕рж┐ржн рж▓рзЗржЖржЙржЯ рждрзИрж░рж┐рж░ ржЬржирзНржп ржПржЯрж┐ржЗ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЗрж╢рж┐ ржмрзНржпржмрж╣рзГржд рж╣рзЯ)ред

minHeight: ржЙржЗржЬрзЗржЯржЯрж┐ рж╕рж░рзНржмржирж┐ржорзНржи ржХрждржЯрж╛ рж▓ржорзНржмрж╛ рж╣рждрзЗ ржкрж╛рж░ржмрзЗред

maxHeight: ржЙржЗржЬрзЗржЯржЯрж┐ рж╕рж░рзНржмрзЛржЪрзНржЪ ржХрждржЯрж╛ рж▓ржорзНржмрж╛ рж╣рждрзЗ ржкрж╛рж░ржмрзЗред

ржПржЗ ржЪрж╛рж░ржЯрж┐ ржорж╛ржи ржжрж┐рзЯрзЗ LayoutBuilder рждрж╛рж░ ржЪрж╛ржЗрж▓рзНржб ржЙржЗржЬрзЗржЯржХрзЗ ржмрж▓рзЗ ржжрзЗрзЯ ржпрзЗ рждрж╛ржХрзЗ ржПржЗ рж╕рзАржорж╛рж░ ржоржзрзНржпрзЗржЗ ржирж┐ржЬрзЗрж░ ржЖржХрж╛рж░ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рждрзЗ рж╣ржмрзЗред

ржкрзНрж░рж╢рзНржи рзй: ржзрж░рзЛ, рждрзЛржорж╛ржХрзЗ ржПржХржЯрж┐ Dialog ржмржХрзНрж╕ ржбрж┐ржЬрж╛ржЗржи ржХрж░рждрзЗ рж╣ржмрзЗ ржпрж╛ ржлрзЛржирзЗрж░ рж╕рзНржХрзНрж░рж┐ржи ржпржжрж┐ portrait ржорзЛржбрзЗ ржерж╛ржХрзЗ рждрж╛рж╣рж▓рзЗ ржПржХрж░ржХржо ржжрзЗржЦрж╛ржмрзЗ ржПржмржВ landscape ржорзЛржбрзЗ ржерж╛ржХрж▓рзЗ ржЖрж░рзЗржХрж░ржХржо ржжрзЗржЦрж╛ржмрзЗред ржПржХрзНрж╖рзЗрждрзНрж░рзЗ рждрзБржорж┐ LayoutBuilder ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗ ржирж╛ржХрж┐ MediaQuery? ржХрзЗржи?

ржПржЗ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржЖржорж┐ MediaQuery ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмред

ржХрж╛рж░ржг:

ржкрзНрж░рзЯрзЛржЬржиржЯрж┐ рж╕рж░рж╛рж╕рж░рж┐ рж╕рзНржХрзНрж░рж┐ржирзЗрж░ ржУрж░рж┐рзЯрзЗржирзНржЯрзЗрж╢ржи (orientation) ржПрж░ ржЙржкрж░ ржирж┐рж░рзНржнрж░рж╢рзАрж▓, ржпрж╛ ржПржХржЯрж┐ ржЧрзНрж▓рзЛржмрж╛рж▓ рж╕рзНржХрзНрж░рж┐ржи ржкрзНрж░рзЛржкрж╛рж░рзНржЯрж┐ред MediaQuery ржЖржорж╛ржжрзЗрж░ рж╕рж░рж╛рж╕рж░рж┐ рж╕рзНржХрзНрж░рж┐ржирзЗрж░ ржУрж░рж┐рзЯрзЗржирзНржЯрзЗрж╢ржи ржЬрж╛ржирж╛рж░ рж╕рзБржпрзЛржЧ ржХрж░рзЗ ржжрзЗрзЯ (MediaQuery.of(context).orientation)ред

Dart

final orientation = MediaQuery.of(context).orientation;

if (orientation == Orientation.portrait) {
  // Portrait ржорзЛржбрзЗрж░ ржЬржирзНржп Dialog ржбрж┐ржЬрж╛ржЗржи
} else {
  // Landscape ржорзЛржбрзЗрж░ ржЬржирзНржп Dialog ржбрж┐ржЬрж╛ржЗржи
}
LayoutBuilder ржжрж┐рзЯрзЗржУ ржХрж╛ржЬржЯрж┐ ржХрж░рж╛ рж╕ржорзНржнржмред ржЖржорж░рж╛ constraints.maxWidth ржПржмржВ constraints.maxHeight рждрзБрж▓ржирж╛ ржХрж░рзЗ (ржпрзЗржоржи, maxWidth < maxHeight рж╣рж▓рзЗ portrait ржзрж░рж╛) ржУрж░рж┐рзЯрзЗржирзНржЯрзЗрж╢ржи ржЕржирзБржорж╛ржи ржХрж░рждрзЗ ржкрж╛рж░рж┐ред ржХрж┐ржирзНрждрзБ ржПржЯрж┐ ржПржХржЯрж┐ ржкрж░рзЛржХрзНрж╖ ржкржжрзНржзрждрж┐ ржПржмржВ ржХрзЛржбрзЗрж░ ржЙржжрзНржжрзЗрж╢рзНржпржХрзЗ ржЕрж╕рзНржкрж╖рзНржЯ ржХрж░рзЗ рждрзЛрж▓рзЗред