
1я╕ПтГг Shared Preferences ржХрж┐?
рж╕рж╣ржЬ рж╕ржВржЬрзНржЮрж╛:
Shared Preferences рж╣рж▓ ржбрж┐ржнрж╛ржЗрж╕рзЗ ржЫрзЛржЯ ржбрзЗржЯрж╛ рж╕рзЗржн ржХрж░рж╛рж░ рж╕рж┐рж╕рзНржЯрзЗржоред
ржПржЯрж╛ ржЕрзНржпрж╛ржкрзЗрж░ рж▓рзЛржХрж╛рж▓ рж╕рзНржЯрзЛрж░рзЗржЬрзЗ (key-value ржлрж░ржорзНржпрж╛ржЯрзЗ) ржбрзЗржЯрж╛ рж╕рзЗржн ржХрж░рзЗ рж░рж╛ржЦрзЗред
ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржпрж╛ржмрзЗ ржирж╛, ржпрждржХрзНрж╖ржг ржирж╛ рждрзБржорж┐ ржЕрзНржпрж╛ржк ржЖржиржЗржирж╕рзНржЯрж▓ ржХрж░рзЛ ржмрж╛ ржорзНржпрж╛ржирзБрзЯрж╛рж▓рж┐ ржХрзНрж▓рж┐рзЯрж╛рж░ ржХрж░рзЛред

ржоржирзЗ рж░рж╛ржЦрзЛ:

ржПржЯрж╛ ржбрж╛ржЯрж╛ржмрзЗржЬ ржирж╛ (ржпрзЗржоржи: SQLite)ред
ржПржЦрж╛ржирзЗ рж╢рзБржзрзБ ржЫрзЛржЯ, рж╕рж┐ржорзНржкрж▓ ржбрзЗржЯрж╛ рж░рж╛ржЦрж╛ рж╣рзЯ (ржпрзЗржоржи: username, token, theme mode)ред
ржбрзЗржЯрж╛ key-value ржЖржХрж╛рж░рзЗ рж░рж╛ржЦрж╛ рж╣рзЯ (ржпрзЗржоржи: "theme": "dark" )

ржорзВрж▓ ржзрж╛рж░ржгрж╛: ржЕрзНржпрж╛ржкрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ "ржорзНржпрж╛ржЬрж┐ржХ ржкржХрзЗржЯ ржбрж╛рзЯрзЗрж░рж┐" ЁЯУУ
ржоржирзЗ ржХрж░рзБржи, ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржкрзЗрж░ ржПржХржЯрж┐ ржирж┐ржЬрж╕рзНржм ржорзНржпрж╛ржЬрж┐ржХ ржкржХрзЗржЯ ржбрж╛рзЯрзЗрж░рж┐ ржЖржЫрзЗред ржПржЗ ржбрж╛рзЯрзЗрж░рж┐рж░ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп рж╣рж▓рзЛ:
*ржЫрзЛржЯ ржирзЛржЯ рж░рж╛ржЦрж╛ ржпрж╛рзЯ: ржЖржкржирж┐ ржПржЗ ржбрж╛рзЯрзЗрж░рж┐рждрзЗ ржЫрзЛржЯ ржЫрзЛржЯ рждржерзНржп рж▓рж┐ржЦрзЗ рж░рж╛ржЦрждрзЗ ржкрж╛рж░рзЗржиред ржпрзЗржоржи: ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржирж╛ржо, рж╕рзЗ ржбрж╛рж░рзНржХ ржорзЛржб ржкржЫржирзНржж ржХрж░рзЗ ржХрж┐ ржирж╛, ржмрж╛ рждрж╛рж░ рж╣рж╛ржЗ-рж╕рзНржХрзЛрж░ ржХрждред
*рж▓рзЗржмрзЗрж▓ ржжрж┐рзЯрзЗ ржоржирзЗ рж░рж╛ржЦрж╛: ржкрзНрж░рждрж┐ржЯрж┐ рждржерзНржп ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ "рж▓рзЗржмрзЗрж▓" ржмрж╛ Key ржжрж┐рзЯрзЗ рж╕рзЗржн ржХрж░рждрзЗ рж╣рзЯред ржпрзЗржоржи: name рж▓рзЗржмрзЗрж▓рзЗрж░ ржкрж╛рж╢рзЗ ржЖржкржирж┐ рж▓рж┐ржЦрж▓рзЗржи 'Siyam'ред
* рж╕рзНржерж╛рзЯрзА ржорзЗржорзЛрж░рж┐: рж╕ржмржЪрзЗрзЯрзЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржмрж┐рж╖рзЯ рж╣рж▓рзЛ, ржЕрзНржпрж╛ржкржЯрж┐ ржмржирзНржз ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрж╛рж▓рзБ ржХрж░рж▓рзЗржУ ржбрж╛рзЯрзЗрж░рж┐рж░ рж▓рзЗржЦрж╛ ржорзБржЫрзЗ ржпрж╛рзЯ ржирж╛ред ржПржЯрж┐ рж╕рзНржерж╛рзЯрзАржнрж╛ржмрзЗ рж╕рзЗржн рж╣рзЯрзЗ ржерж╛ржХрзЗред
*рж╕рж╣ржЬ рждржерзНржп: ржПржЗ ржбрж╛рзЯрзЗрж░рж┐ рж╢рзБржзрзБ рж╕рж╣ржЬ ржУ рж╕рж░рж▓ рждржерзНржп (Primitive Data) рж░рж╛ржЦрждрзЗ ржкрж╛рж░рзЗ, ржпрзЗржоржи - рж▓рзЗржЦрж╛ (String), рж╕ржВржЦрзНржпрж╛ (int, double), рж╕рждрзНржп/ржорж┐ржерзНржпрж╛ (bool)ред ржПржЦрж╛ржирзЗ ржЫржмрж┐ ржмрж╛ ржмрзЬ ржлрж╛ржЗрж▓ рж░рж╛ржЦрж╛ ржпрж╛рзЯ ржирж╛ред

2я╕ПтГг ржХрзЗржи рж▓рж╛ржЧрзЗ?
ржЙржжрж╛рж╣рж░ржг ржжрж┐ржЗ тАФ
рждрзБржорж┐ ржпржжрж┐ ржПржХржЯрж┐ Login App ржмрж╛ржирж╛ржУ, ржЗржЙржЬрж╛рж░ ржкрзНрж░ржержоржмрж╛рж░ рж▓ржЧржЗржи ржХрж░рж▓рзЛ, ржПржЦржи рждрзБржорж┐ ржЪрж╛ржУ ржпрзЗржи рж╕рзЗ ржкрж░рзЗрж░ржмрж╛рж░ ржЕрзНржпрж╛ржк ржЦрзБрж▓рж▓рзЗржЗ рж▓ржЧржЗржи ржХрж░рж╛ ржЕржмрж╕рзНржерж╛рзЯ ржерж╛ржХрзЗ тАФ
рждрж╛рж╣рж▓рзЗржЗ Shared Preferences ржжрж┐рзЯрзЗ рждрзБржорж┐ "isLoggedIn = true" рж╕рзЗржн ржХрж░рзЗ рж░рж╛ржЦржмрзЗред
ржЖрж░рзЗржХржЯрж╛ ржЙржжрж╛рж╣рж░ржг:
Dark Mode On/Off ржмрж╛ржЯржи ржжрж┐рж▓рзЗ, ржЗржЙржЬрж╛рж░ рж╢рзЗрж╖ржмрж╛рж░ ржпрзЗржЯрж╛ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзЗржЫрзЗ рж╕рзЗржЯрж╛ ржпрзЗржи ржкрж░рзЗрж░ржмрж╛рж░ ржЕрзНржпрж╛ржк ржУржкрзЗржи ржХрж░рж▓рзЗ ржерж╛ржХрзЗ тАФ рж╕рзЗржЯрж╛ржУ Shared Preferences ржжрж┐рзЯрзЗ рж╕рзЗржн рж╣ржмрзЗред

ржХржЦржи SharedPreferences ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи?
*ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж▓ржЧржЗржи ржЕржмрж╕рзНржерж╛рзЯ ржЖржЫрзЗ ржХрж┐ ржирж╛, рждрж╛ ржоржирзЗ рж░рж╛ржЦрждрзЗ (isLoggedIn: true)ред
*ржЕрзНржпрж╛ржкрзЗрж░ ржерж┐ржо (Theme) ржбрж╛рж░рзНржХ ржорзЛржб ржирж╛ рж▓рж╛ржЗржЯ ржорзЛржб, рждрж╛ рж╕рзЗржн ржХрж░рждрзЗред
*ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржирж╛ржо, ржЗржорзЗржЗрж▓ ржмрж╛ ржЫрзЛржЯ ржХрзЛржирзЛ ржмрзНржпржХрзНрждрж┐ржЧржд рждржерзНржп рж╕рзЗржн ржХрж░рждрзЗред
*ржЕрзНржпрж╛ржкрзЗрж░ рж╕рзЗржЯрж┐ржВрж╕ (ржпрзЗржоржи: ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржЪрж╛рж▓рзБ/ржмржирзНржз) ржоржирзЗ рж░рж╛ржЦрждрзЗред

 ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ? (Flow)
ржбрзЗржЯрж╛ рж╕рзЗржн: saveData(key, value)
ржбрзЗржЯрж╛ ржкрзЬрж╛: getData(key)
ржбрзЗржЯрж╛ ржбрж┐рж▓рж┐ржЯ: remove(key) ржмрж╛ clear()

4я╕ПтГг Flutter-ржП ржмрзНржпржмрж╣рж╛рж░ (Basic Example)
.........................................................................................
ржкрзНрж░ржЬрзЗржХрзНржЯрзЗрж░ pubspec.yaml ржлрж╛ржЗрж▓рзЗ shared_preferences-ржХрзЗ ржпрзБржХрзНржд ржХрж░рждрзЗ рж╣ржмрзЗред
Step 1: Dependency ржпрзЛржЧ ржХрж░рзЛ
pubspec.yaml ржП:

dependencies:
  shared_preferences: ^2.2.3   # рж▓рзЗржЯрзЗрж╕рзНржЯ ржнрж╛рж░рзНрж╕ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи

ржлрж╛ржЗрж▓ржЯрж┐ рж╕рзЗржн ржХрж░рзЗ flutter pub get ржХржорж╛ржирзНржбржЯрж┐ рж░рж╛ржи ржХрж░рзБржиред
.........................................................................................

Step 2: Import ржХрж░рзЛ
import 'package:shared_preferences/shared_preferences.dart';
.........................................................................................
Step 3: ржбрзЗржЯрж╛ рж╕рзЗржн ржХрж░рж╛
ржбрзЗржЯрж╛ рж╕рзЗржн ржХрж░рждрзЗ рж╣рж▓рзЗ, ржЖржкржирж╛ржХрзЗ ржкрзНрж░ржержорзЗ ржбрж╛рзЯрзЗрж░рж┐ржЯрж┐ ржЦрзБрж▓рждрзЗ рж╣ржмрзЗ ржПржмржВ рждрж╛рж░ржкрж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж▓рзЗржмрзЗрж▓ ржжрж┐рзЯрзЗ рждржерзНржп рж▓рж┐ржЦрждрзЗ рж╣ржмрзЗред

saveData() async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  await prefs.setString('username', 'Siyam');
  await prefs.setBool('isLoggedIn', true);
  await prefs.setInt('age', 22);
}

ржЖрж░рзЗржХ ржкржжрзНржзрждрж┐ржГ

import 'package:shared_preferences/shared_preferences.dart';

// ржбрзЗржЯрж╛ рж╕рзЗржн ржХрж░рж╛рж░ ржПржХржЯрж┐ ржлрж╛ржВрж╢ржи
Future<void> saveData() async {
  // рзз. ржкрзНрж░ржержорзЗ ржбрж╛рзЯрзЗрж░рж┐ржЯрж┐ ржЦрзБрж▓рждрзЗ рж╣ржмрзЗ (ржПржЯрж┐ ржПржХржЯрж┐ async ржХрж╛ржЬ)
  final SharedPreferences prefs = await SharedPreferences.getInstance();

  // рзи. ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж▓рзЗржмрзЗрж▓ (key) ржжрж┐рзЯрзЗ ржбрзЗржЯрж╛ рж╕рзЗржн ржХрж░рждрзЗ рж╣ржмрзЗ
  await prefs.setString('name', 'Siyam');         // 'name' рж▓рзЗржмрзЗрж▓рзЗ ржПржХржЯрж┐ String рж╕рзЗржн ржХрж░рж╛ рж╣рж▓рзЛ
  await prefs.setInt('score', 100);             // 'score' рж▓рзЗржмрзЗрж▓рзЗ ржПржХржЯрж┐ int рж╕рзЗржн ржХрж░рж╛ рж╣рж▓рзЛ
  await prefs.setBool('isDarkMode', true);      // 'isDarkMode' рж▓рзЗржмрзЗрж▓рзЗ ржПржХржЯрж┐ bool рж╕рзЗржн ржХрж░рж╛ рж╣рж▓рзЛ
}
.........................................................................................
Step 4: ржбрзЗржЯрж╛ ржкрзЬрж╛
рж╕рзЗржн ржХрж░рж╛ ржбрзЗржЯрж╛ ржкрзЬрж╛рж░ ржЬржирзНржпржУ ржЖржкржирж╛ржХрзЗ ржкрзНрж░ржержорзЗ ржбрж╛рзЯрзЗрж░рж┐ржЯрж┐ ржЦрзБрж▓рждрзЗ рж╣ржмрзЗред
readData() async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  String? name = prefs.getString('username');
  bool? login = prefs.getBool('isLoggedIn');
  int? age = prefs.getInt('age');

  print("Name: $name, Logged In: $login, Age: $age");
}

ржЖрж░рзЗржХ ржкржжрзНржзрждрж┐ржГ

// ржбрзЗржЯрж╛ ржкрзЬрж╛рж░ ржПржХржЯрж┐ ржлрж╛ржВрж╢ржи
Future<void> readData() async {
  // рзз. ржбрж╛рзЯрзЗрж░рж┐ржЯрж┐ ржЦрзБрж▓рждрзЗ рж╣ржмрзЗ
  final SharedPreferences prefs = await SharedPreferences.getInstance();

  // рзи. ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж▓рзЗржмрзЗрж▓ (key) ржжрж┐рзЯрзЗ ржбрзЗржЯрж╛ ржкрзЬрждрзЗ рж╣ржмрзЗ
  // ржпржжрж┐ ржУржЗ рж▓рзЗржмрзЗрж▓рзЗ ржХрзЛржирзЛ ржбрзЗржЯрж╛ ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ null ржжрзЗржЦрж╛ржмрзЗред рждрж╛ржЗ ржПржХржЯрж┐ ржбрж┐ржлрж▓рзНржЯ ржнрзНржпрж╛рж▓рзБ (??) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржнрж╛рж▓рзЛред
  String? name = prefs.getString('name');
  int score = prefs.getInt('score') ?? 0; // ржпржжрж┐ 'score' ржирж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ, рждржмрзЗ 0 ржзрж░рзЗ ржирж╛ржУ
  bool isDarkMode = prefs.getBool('isDarkMode') ?? false; // ржпржжрж┐ 'isDarkMode' ржирж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ, рждржмрзЗ false ржзрж░рзЗ ржирж╛ржУ

  print('Name: $name');
  print('Score: $score');
  print('Is Dark Mode: $isDarkMode');
}
.........................................................................................

Step 5: ржбрзЗржЯрж╛ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛
ржЖржкржирж┐ ржЪрж╛ржЗрж▓рзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрзЛржирзЛ ржирзЛржЯ ржЕржержмрж╛ ржкрзБрж░рзЛ ржбрж╛рзЯрзЗрж░рж┐ ржЦрж╛рж▓рж┐ ржХрж░рзЗ ржжрж┐рждрзЗ ржкрж╛рж░рзЗржиред

deleteData() async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  await prefs.remove('username'); // рж╢рзБржзрзБ рззржЯрж╛ key ржбрж┐рж▓рж┐ржЯ ржХрж░ржмрзЗ
  await prefs.clear(); // рж╕ржм ржбрж┐рж▓рж┐ржЯ ржХрж░ржмрзЗ
}

ржЖрж░рзЗржХ ржкржжрзНржзрждрж┐ржГ

Future<void> deleteData() async {
  final SharedPreferences prefs = await SharedPreferences.getInstance();

  // ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржПржХржЯрж┐ ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ ржЬржирзНржп
  await prefs.remove('score');

  // ржкрзБрж░рзЛ ржбрж╛рзЯрзЗрж░рж┐рж░ рж╕ржм ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ ржЬржирзНржп
  // await prefs.clear();
}
.........................................................................................
7я╕ПтГг Shared Preferences Data Type Support
рждрзБржорж┐ ржирж┐ржЪрзЗрж░ ржЯрж╛ржЗржкржЧрзБрж▓рзЛ рж╕рзЗржн ржХрж░рждрзЗ ржкрж╛рж░рзЛ:

* setString() / getString()
* setInt() / getInt()
* setDouble() / getDouble()
* setBool() / getBool()
* setStringList() / getStringList()


8я╕ПтГг Tree Structure (ржпрзЗржи ржоржирзЗ ржерж╛ржХрзЗ)

SharedPreferences
тФВ
тФЬтФАтФА saveData()
тФВ   тФЬтФАтФА setString(key, value)
тФВ   тФЬтФАтФА setInt(key, value)
тФВ   тФЬтФАтФА setBool(key, value)
тФВ   тФЬтФАтФА setDouble(key, value)
тФВ   тФФтФАтФА setStringList(key, value)
тФВ
тФЬтФАтФА getData()
тФВ   тФЬтФАтФА getString(key)
тФВ   тФЬтФАтФА getInt(key)
тФВ   тФЬтФАтФА getBool(key)
тФВ   тФЬтФАтФА getDouble(key)
тФВ   тФФтФАтФА getStringList(key)
тФВ
тФФтФАтФА deleteData()
    тФЬтФАтФА remove(key)
    тФФтФАтФА clear()


ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржирзЛржЯ
рж╕ржмрж╕ржорзЯ await ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗ (ржХрж╛рж░ржг ржПржЯрж╛ async)ред
ржбрзЗржЯрж╛ ржмрзЬ рж╣рж▓рзЗ (ржпрзЗржоржи ржЫржмрж┐ ржмрж╛ ржнрж┐ржбрж┐ржУ) ржПржЯрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗ ржирж╛, ржмрж░ржВ local database ржмрж╛ file storage ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗред
Null ржЪрзЗржХ ржХрж░рзЛ (?? defaultValue)ред


5я╕ПтГг Real-life Use Case
тЬЕ Login Example:
..................................................................................................................................
// loginUser ржлрж╛ржВрж╢ржиржЯрж┐ ржЕрзНржпрж╛рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛рж╕ржнрж╛ржмрзЗ (asynchronously) ржХрж╛ржЬ ржХрж░ржмрзЗред,
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
loginUser() async {
  // SharedPreferences ржПрж░ ржПржХржЯрж┐ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ, ржпрж╛ ржбрж┐ржнрж╛ржЗрж╕рзЗрж░ рж╕рзНржЯрзЛрж░рзЗржЬрзЗ ржбрзЗржЯрж╛ рж░рж╛ржЦрждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗред
  SharedPreferences prefs = await SharedPreferences.getInstance();
  // 'isLoggedIn' ржирж╛ржорзЗрж░ ржПржХржЯрж┐ ржХрзА (key) ржПрж░ ржмрж┐ржкрж░рзАрждрзЗ ржмрзБрж▓рж┐ржпрж╝рж╛ржи ржорж╛ржи (boolean value) 'true' рж╕рзЗржн ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
  await prefs.setBool('isLoggedIn', true);
}

// checkLogin ржлрж╛ржВрж╢ржиржЯрж┐ ржЕрзНржпрж╛рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛рж╕ржнрж╛ржмрзЗ (asynchronously) ржХрж╛ржЬ ржХрж░ржмрзЗред
checkLogin() async {
  // SharedPreferences ржПрж░ ржПржХржЯрж┐ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ ржбрзЗржЯрж╛ ржкржбрж╝рж╛рж░ ржЬржирзНржпред
  SharedPreferences prefs = await SharedPreferences.getInstance();
  // 'isLoggedIn' ржХрзА ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржбрзЗржЯрж╛ ржкржбрж╝рж╛ рж╣ржЪрзНржЫрзЗред ржпржжрж┐ ржХрзЛржирзЛ ржбрзЗржЯрж╛ ржирж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ (null), рждрж╛рж╣рж▓рзЗ ржбрж┐ржлрж▓рзНржЯ рж╣рж┐рж╕рзЗржмрзЗ 'false' ржзрж░рж╛ рж╣ржмрзЗред
  bool loggedIn = prefs.getBool('isLoggedIn') ?? false;

  // ржпржжрж┐ 'loggedIn' ржПрж░ ржорж╛ржи 'true' рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ ржПржЗ ржмрзНрж▓ржХржЯрж┐ ржХрж╛ржЬ ржХрж░ржмрзЗред
  if (loggedIn) {
    // ржХржирж╕рзЛрж▓рзЗ "Welcome Back!" ржкрзНрж░рж┐ржирзНржЯ ржХрж░рж╛ рж╣ржмрзЗред
    print("Welcome Back!");
  } else { // ржЕржирзНржпржерж╛ржпрж╝, ржпржжрж┐ 'loggedIn' ржПрж░ ржорж╛ржи 'false' рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ ржПржЗ ржмрзНрж▓ржХржЯрж┐ ржХрж╛ржЬ ржХрж░ржмрзЗред
    // ржХржирж╕рзЛрж▓рзЗ "Please Login First!" ржкрзНрж░рж┐ржирзНржЯ ржХрж░рж╛ рж╣ржмрзЗред
    print("Please Login First!");
  }
}


ржХрзЛржбрзЗрж░ рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж░рзНржгржирж╛
ржПржЗ ржХрзЛржбржЯрж┐ ржлрзНрж▓рж╛ржЯрж╛рж░рзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж▓ржЧржЗржи ржЕржмрж╕рзНржерж╛ ржоржирзЗ рж░рж╛ржЦрж╛рж░ (Session Management) ржЬржирзНржп рж▓рзЗржЦрж╛ рж╣рзЯрзЗржЫрзЗред ржПржЦрж╛ржирзЗ shared_preferences ржкрзНржпрж╛ржХрзЗржЬ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ, ржпрж╛ ржбрж┐ржнрж╛ржЗрж╕рзЗрж░ рж▓рзЛржХрж╛рж▓ рж╕рзНржЯрзЛрж░рзЗржЬрзЗ ржЫрзЛржЯ ржбрзЗржЯрж╛ рж╕рзЗржн ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗред
loginUser() ржлрж╛ржВрж╢ржи: ржпржЦржи ржХрзЛржирзЛ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж╕ржлрж▓ржнрж╛ржмрзЗ рж▓ржЧржЗржи ржХрж░рзЗ, рждржЦржи ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржХрж▓ ржХрж░рж╛ рж╣ржпрж╝ред ржПржЯрж┐ ржбрж┐ржнрж╛ржЗрж╕рзЗрж░ рж╕рзНржЯрзЛрж░рзЗржЬрзЗ 'isLoggedIn' ржирж╛ржорзЗ ржПржХржЯрж┐ ржЪрж╛ржмрж┐ (key) рждрзИрж░рж┐ ржХрж░рзЗ рждрж╛рж░ ржорж╛ржи true рж╣рж┐рж╕рзЗржмрзЗ рж╕рзЗржн ржХрж░рзЗ рж░рж╛ржЦрзЗред
checkLogin() ржлрж╛ржВрж╢ржи: ржЕрзНржпрж╛ржкржЯрж┐ ржкрзБржирж░рж╛ржпрж╝ ржЪрж╛рж▓рзБ рж╣рж▓рзЗ ржмрж╛ ржпрзЗржХрзЛржирзЛ рж╕ржоржпрж╝ ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржХрж▓ ржХрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж▓ржЧржЗржи ржЕржмрж╕рзНржерж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржпрж╝ред ржПржЯрж┐ рж╕рзНржЯрзЛрж░рзЗржЬ ржерзЗржХрзЗ 'isLoggedIn' ржПрж░ ржорж╛ржи ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗред ржпржжрж┐ ржорж╛ржи true ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ (ржЕрж░рзНржерж╛рзО ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЖржЧрзЗ рж▓ржЧржЗржи ржХрж░рзЗржЫрж┐рж▓), рждрж╛рж╣рж▓рзЗ "Welcome Back!" ржкрзНрж░рж┐ржирзНржЯ ржХрж░рзЗред ржЖрж░ ржпржжрж┐ ржХрзЛржирзЛ ржорж╛ржи ржирж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ ржЕржержмрж╛ false ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ "Please Login First!" ржкрзНрж░рж┐ржирзНржЯ ржХрж░рзЗред
рж╕рж╣ржЬ ржХржерж╛ржпрж╝, ржПржЗ ржкржжрзНржзрждрж┐рж░ ржорж╛ржзрзНржпржорзЗ ржЕрзНржпрж╛ржк ржоржирзЗ рж░рж╛ржЦрзЗ ржпрзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж▓ржЧржЗржи ржХрж░рж╛ ржЕржмрж╕рзНржерж╛ржпрж╝ ржЖржЫрзЗ ржХрж┐ржирж╛, ржлрж▓рзЗ рждрж╛ржХрзЗ ржмрж╛рж░ржмрж╛рж░ рж▓ржЧржЗржи ржХрж░рждрзЗ рж╣ржпрж╝ ржирж╛ред
..................................................................................................................................

// toggleTheme ржлрж╛ржВрж╢ржиржЯрж┐ ржПржХржЯрж┐ ржмрзБрж▓рж┐ржпрж╝рж╛ржи ржнрзНржпрж╛рж▓рзБ (isDark) ржирзЗржпрж╝ ржПржмржВ ржЕрзНржпрж╛рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛рж╕ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗред
//////////////////////////////////////
toggleTheme(bool isDark) async {
  // SharedPreferences ржПрж░ ржПржХржЯрж┐ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ, ржпрж╛ ржбрж┐ржнрж╛ржЗрж╕рзЗрж░ рж╕рзНржЯрзЛрж░рзЗржЬрзЗ ржбрзЗржЯрж╛ рж░рж╛ржЦрждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗред
  SharedPreferences prefs = await SharedPreferences.getInstance();
  // 'darkMode' ржирж╛ржорзЗрж░ ржПржХржЯрж┐ ржХрзА (key) ржПрж░ ржмрж┐ржкрж░рзАрждрзЗ ржкрж╛рж╕ ржХрж░рж╛ isDark ржнрзНржпрж╛рж▓рзБржЯрж┐ (true/false) рж╕рзЗржн ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
  await prefs.setBool('darkMode', isDark);
}

// loadTheme ржлрж╛ржВрж╢ржиржЯрж┐ ржЕрзНржпрж╛рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛рж╕ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗред
loadTheme() async {
  // SharedPreferences ржПрж░ ржПржХржЯрж┐ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ ржбрзЗржЯрж╛ ржкржбрж╝рж╛рж░ ржЬржирзНржпред
  SharedPreferences prefs = await SharedPreferences.getInstance();
  // 'darkMode' ржХрзА ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржбрзЗржЯрж╛ ржкржбрж╝рж╛ рж╣ржЪрзНржЫрзЗред ржпржжрж┐ ржХрзЛржирзЛ ржбрзЗржЯрж╛ рж╕рзЗржн ржХрж░рж╛ ржирж╛ ржерж╛ржХрзЗ (null), рждрж╛рж╣рж▓рзЗ ржбрж┐ржлрж▓рзНржЯ рж╣рж┐рж╕рзЗржмрзЗ 'false' ржзрж░рж╛ рж╣ржмрзЗред
  bool isDark = prefs.getBool('darkMode') ?? false;

  // isDark ржПрж░ ржнрзНржпрж╛рж▓рзБ true рж╣рж▓рзЗ "Dark Mode" ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗ, ржЕржирзНржпржерж╛ржпрж╝ "Light Mode" ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗред
  print(isDark ? "Dark Mode" : "Light Mode");
}


ржХрзЛржбрзЗрж░ рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж░рзНржгржирж╛
ржПржЗ ржХрзЛржбржЯрж┐ ржПржХржЯрж┐ ржлрзНрж▓рж╛ржЯрж╛рж░ ржЕрзНржпрж╛ржкрзЗрж░ ржерж┐ржо (Theme) ржЕрж░рзНржерж╛рзО ржбрж╛рж░рзНржХ ржорзЛржб ржмрж╛ рж▓рж╛ржЗржЯ ржорзЛржб ржЕржмрж╕рзНржерж╛ржХрзЗ ржбрж┐ржнрж╛ржЗрж╕рзЗрж░ рж▓рзЛржХрж╛рж▓ рж╕рзНржЯрзЛрж░рзЗржЬрзЗ рж╕рзЗржн ржХрж░рзЗ рж░рж╛ржЦрж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред

toggleTheme() ржлрж╛ржВрж╢ржи: ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐рж░ ржХрж╛ржЬ рж╣рж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржерж┐ржо (ржбрж╛рж░рзНржХ ржмрж╛ рж▓рж╛ржЗржЯ) рж╕рзНржЯрзЛрж░рзЗржЬрзЗ рж╕рзЗржн ржХрж░рж╛ред ржпржЦржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржерж┐ржо ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗ, рждржЦржи ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржХрж▓ ржХрж░рзЗ 'darkMode' ржирж╛ржорзЗрж░ ржПржХржЯрж┐ ржЪрж╛ржмрж┐рж░ ржмрж┐ржкрж░рзАрждрзЗ true (ржбрж╛рж░рзНржХ ржорзЛржбрзЗрж░ ржЬржирзНржп) ржмрж╛ false (рж▓рж╛ржЗржЯ ржорзЛржбрзЗрж░ ржЬржирзНржп) рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣рзЯред

loadTheme() ржлрж╛ржВрж╢ржи: ржЕрзНржпрж╛ржкржЯрж┐ ржпржЦржи ржЪрж╛рж▓рзБ рж╣ржпрж╝, рждржЦржи ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржХрж▓ ржХрж░рзЗ рж╕рзНржЯрзЛрж░рзЗржЬ ржерзЗржХрзЗ рж╕рзЗржн ржХрж░рж╛ ржерж┐ржорзЗрж░ рждржерзНржп рж▓рзЛржб ржХрж░рж╛ рж╣ржпрж╝ред ржПржЯрж┐ 'darkMode' ржПрж░ ржорж╛ржи ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзЗред ржпржжрж┐ ржорж╛ржи true рж╣ржпрж╝, рждрж╛рж░ ржорж╛ржирзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж╢рзЗрж╖ржмрж╛рж░ ржбрж╛рж░рзНржХ ржорзЛржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрж┐рж▓ред ржЖрж░ ржорж╛ржи false рж╣рж▓рзЗ ржмрж╛ ржХрзЛржирзЛ ржорж╛ржи рж╕рзЗржн ржХрж░рж╛ ржирж╛ ржерж╛ржХрж▓рзЗ, ржЕрзНржпрж╛ржкржЯрж┐ рж▓рж╛ржЗржЯ ржорзЛржбрзЗ ржЪрж╛рж▓рзБ рж╣ржмрзЗред

ржорзВрж▓ржд, ржПржЗ ржХрзЛржбрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржЕрзНржпрж╛ржк ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржерж┐ржо ржкржЫржирзНржж ржоржирзЗ рж░рж╛ржЦрждрзЗ ржкрж╛рж░рзЗ ржПржмржВ ржЕрзНржпрж╛ржк ржмржирзНржз ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрж╛рж▓рзБ ржХрж░рж▓рзЗржУ ржЖржЧрзЗрж░ ржерж┐ржоржЯрж┐ржЗ ржжрзЗржЦрж╛ржпрж╝ред

//////////////////////////////////////
ржЖрж░рзЗржХ ржкржжрзНржзрждрж┐ржГ
ржЕрзНржпрж╛ржбржнрж╛ржирзНрж╕: ржПржХржЯрж┐ рж╕ржорзНржкрзВрж░рзНржг ржЙржжрж╛рж╣рж░ржг (ржерж┐ржо ржЪрзЗржЮрзНржЬрж╛рж░)
ржЪрж▓рзБржи, ржПржХржЯрж┐ ржЕрзНржпрж╛ржк ржмрж╛ржирж╛ржЗ ржпрзЗржЦрж╛ржирзЗ ржПржХржЯрж┐ рж╕рзБржЗржЪ ржерж╛ржХржмрзЗред рж╕рзБржЗржЪ ржЕржи ржХрж░рж▓рзЗ ржЕрзНржпрж╛ржкрзЗрж░ ржерж┐ржо ржбрж╛рж░рзНржХ рж╣ржмрзЗ ржПржмржВ ржЕрзНржпрж╛ржкржЯрж┐ ржмржирзНржз ржХрж░рзЗ ржЪрж╛рж▓рзБ ржХрж░рж▓рзЗржУ рж╕рзЗржЗ ржерж┐ржоржЯрж┐ ржоржирзЗ ржерж╛ржХржмрзЗред
///////////////

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  ThemeMode _themeMode = ThemeMode.light; // ржбрж┐ржлрж▓рзНржЯ ржерж┐ржо

  @override
  void initState() {
    super.initState();
    _loadTheme(); // ржЕрзНржпрж╛ржк ржЪрж╛рж▓рзБ рж╣ржУрзЯрж╛рж░ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ рж╕рзЗржн ржХрж░рж╛ ржерж┐ржо рж▓рзЛржб рж╣ржмрзЗ
  }

  // рж╕рзЗржн ржХрж░рж╛ ржерж┐ржо рж▓рзЛржб ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
  _loadTheme() async {
    final SharedPreferences prefs = await SharedPreferences.getInstance();
    // 'isDarkMode' ржирж╛ржорзЗ ржХрж┐ржЫрзБ рж╕рзЗржн ржХрж░рж╛ ржЖржЫрзЗ ржХрж┐ ржирж╛ ржЪрзЗржХ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
    bool isDarkMode = prefs.getBool('isDarkMode') ?? false;
    setState(() {
      _themeMode = isDarkMode ? ThemeMode.dark : ThemeMode.light;
    });
  }

  // ржерж┐ржо рж╕рзЗржн ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
  _saveTheme(bool isDarkMode) async {
    final SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('isDarkMode', isDarkMode);
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'SharedPreferences Demo',
      theme: ThemeData.light(), // рж▓рж╛ржЗржЯ ржерж┐ржорзЗрж░ ржЬржирзНржп рж╕рзНржЯрж╛ржЗрж▓
      darkTheme: ThemeData.dark(), // ржбрж╛рж░рзНржХ ржерж┐ржорзЗрж░ ржЬржирзНржп рж╕рзНржЯрж╛ржЗрж▓
      themeMode: _themeMode, // ржХрзЛржи ржерж┐ржоржЯрж┐ ржмрж░рзНрждржорж╛ржирзЗ ┘Б╪╣╪з┘Д ржерж╛ржХржмрзЗ
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Theme Switcher'),
        ),
        body: Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text('Light Mode'),
              Switch(
                value: _themeMode == ThemeMode.dark,
                onChanged: (isDarkMode) {
                  setState(() {
                    _themeMode = isDarkMode ? ThemeMode.dark : ThemeMode.light;
                    _saveTheme(isDarkMode); // рж╕рзБржЗржЪ ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ ржерж┐ржо рж╕рзЗржн рж╣ржмрзЗ
                  });
                },
              ),
              const Text('Dark Mode'),
            ],
          ),
        ),
      ),
    );
  }
}




..................................................................................................................................

 ржлрзБрж▓ ржХрзЛржб тАУ Login + Logout + Theme Save with Shared Preferences

 import 'package:flutter/material.dart';                           // Flutter UI ржкрзНржпрж╛ржХрзЗржЬ ржЗржоржкрзЛрж░рзНржЯ
 import 'package:shared_preferences/shared_preferences.dart';      // Shared Preferences ржкрзНржпрж╛ржХрзЗржЬ ржЗржоржкрзЛрж░рзНржЯ

 void main() {
   runApp(MyApp());                                                // ржЕрзНржпрж╛ржк рж╢рзБрж░рзБ
 }

 class MyApp extends StatefulWidget {                              // StatefulWidget ржХрж╛рж░ржг ржерж┐ржо ржЪрзЗржЮрзНржЬ ржХрж░рждрзЗ рж╣ржмрзЗ
   @override
   State<MyApp> createState() => _MyAppState();
 }

 class _MyAppState extends State<MyApp> {
   bool isDarkMode = false;                                        // ржерж┐ржо ржорзЛржб рж╕рзНржЯрзЗржЯ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓
   bool isLoggedIn = false;                                        // рж▓ржЧржЗржи рж╕рзНржЯрзЗржЯ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓

   @override
   void initState() {
     super.initState();
     loadPreferences();                                            // ржЕрзНржпрж╛ржк рж╢рзБрж░рзБрждрзЗ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рзЛ
   }

   // ЁЯФ╣ SharedPreferences ржерзЗржХрзЗ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рж╛
   void loadPreferences() async {
     SharedPreferences prefs = await SharedPreferences.getInstance(); // ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ рждрзИрж░рж┐
     setState(() {
       isDarkMode = prefs.getBool('darkMode') ?? false;             // ржбрж╛рж░рзНржХ ржорзЛржб рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ рж▓рзЛржб
       isLoggedIn = prefs.getBool('isLoggedIn') ?? false;           // рж▓ржЧржЗржи рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ рж▓рзЛржб
     });
   }

   // ЁЯФ╣ ржерж┐ржо рж╕рзЗржн ржХрж░рж╛
   void saveTheme(bool value) async {
     SharedPreferences prefs = await SharedPreferences.getInstance();
     await prefs.setBool('darkMode', value);                        // ржбрж╛рж░рзНржХ ржорзЛржб рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ рж╕рзЗржн
   }

   // ЁЯФ╣ рж▓ржЧржЗржи рж╕рзЗржн ржХрж░рж╛
   void loginUser() async {
     SharedPreferences prefs = await SharedPreferences.getInstance();
     await prefs.setBool('isLoggedIn', true);                       // рж▓ржЧржЗржи рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ рж╕рзЗржн
     setState(() {
       isLoggedIn = true;                                           // рж▓рзЛржХрж╛рж▓ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ
     });
   }

   // ЁЯФ╣ рж▓ржЧржЖржЙржЯ рж╕рзЗржн ржХрж░рж╛
   void logoutUser() async {
     SharedPreferences prefs = await SharedPreferences.getInstance();
     await prefs.setBool('isLoggedIn', false);                      // рж▓ржЧржЗржи рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржлрж╛рж▓рж╕ ржХрж░рзЗ ржжрж╛ржУ
     setState(() {
       isLoggedIn = false;                                          // рж▓рзЛржХрж╛рж▓ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ
     });
   }

   @override
   Widget build(BuildContext context) {
     return MaterialApp(
       theme: isDarkMode ? ThemeData.dark() : ThemeData.light(),     // ржбрж╛рж░рзНржХ ржмрж╛ рж▓рж╛ржЗржЯ ржерж┐ржо рж╕рзЗржЯ ржХрж░рж╛
       home: Scaffold(
         appBar: AppBar(
           title: Text("Shared Preferences Demo"),                  // ржЕрзНржпрж╛ржкрзЗрж░ ржЯрж╛ржЗржЯрзЗрж▓
           actions: [
             Switch(                                                // ржерж┐ржо ржЪрзЗржЮрзНржЬ ржХрж░рж╛рж░ рж╕рзБржЗржЪ
               value: isDarkMode,                                   // ржмрж░рзНрждржорж╛ржи ржерж┐ржо рж╕рзНржЯрзЗржЯ
               onChanged: (value) {                                 // ржерж┐ржо ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ рж╕ржорзЯ
                 setState(() {
                   isDarkMode = value;                              // рж▓рзЛржХрж╛рж▓ рж╕рзНржЯрзЗржЯ ржкрж░рж┐ржмрж░рзНрждржи
                   saveTheme(value);                                // Shared Preferences ржП рж╕рзЗржн
                 });
               },
             )
           ],
         ),
         body: Center(
           child: isLoggedIn
               ? Column(                                            // рж▓ржЧржЗржи ржХрж░рж╛ ржерж╛ржХрж▓рзЗ
                   mainAxisAlignment: MainAxisAlignment.center,
                   children: [
                     Text("Welcome Back! ЁЯОЙ", style: TextStyle(fontSize: 22)),
                     SizedBox(height: 20),
                     ElevatedButton(
                       onPressed: logoutUser,                       // рж▓ржЧржЖржЙржЯ ржлрж╛ржВрж╢ржи ржХрж▓
                       child: Text("Logout"),
                     )
                   ],
                 )
               : Column(                                            // рж▓ржЧржЗржи ржирж╛ ржерж╛ржХрж▓рзЗ
                   mainAxisAlignment: MainAxisAlignment.center,
                   children: [
                     Text("Please Login", style: TextStyle(fontSize: 22)),
                     SizedBox(height: 20),
                     ElevatedButton(
                       onPressed: loginUser,                        // рж▓ржЧржЗржи ржлрж╛ржВрж╢ржи ржХрж▓
                       child: Text("Login"),
                     )
                   ],
                 ),
         ),
       ),
     );
   }
 }
ЁЯУМ ржЕрзНржпрж╛ржкрзЗрж░ ржХрж╛ржЬрзЗрж░ Flow
ржЕрзНржпрж╛ржк ржУржкрзЗржи рж╣рж▓рзЗ loadPreferences() ржЖржЧрзЗрж░ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░ржмрзЗ

ржпржжрж┐ isLoggedIn = true ржерж╛ржХрзЗ тЖТ Welcome рж╕рзНржХрзНрж░рж┐ржи
ржирж╛рж╣рж▓рзЗ тЖТ Login рж╕рзНржХрзНрж░рж┐ржи
ржерж┐ржо рж╕рзБржЗржЪ ржХрж░рж▓рзЗ darkMode ржнрзНржпрж╛рж▓рзБ рж╕рзЗржн рж╣ржмрзЗ
Login ржХрж░рж▓рзЗ isLoggedIn = true рж╕рзЗржн рж╣ржмрзЗ
Logout ржХрж░рж▓рзЗ isLoggedIn = false рж╕рзЗржн рж╣ржмрзЗ

..................................................................................................................................
ЁЯУМ ржлрзБрж▓ ржХрзЛржб тАУ Login Form + SharedPreferences + Validation

TextFormField + Validation ржХрж┐ржнрж╛ржмрзЗ ржХрж░рждрзЗ рж╣рзЯ:
SharedPreferences ржП ржХрж┐ржнрж╛ржмрзЗ String ржУ Boolean ржбрзЗржЯрж╛ рж╕рзЗржн ржХрж░рждрзЗ рж╣рзЯ
ржЕрзНржпрж╛ржк рж░рж┐рж╕рзНржЯрж╛рж░рзНржЯ рж╣рж▓рзЗржУ ржбрзЗржЯрж╛ рж░рзЗржЦрзЗ ржжрзЗржУрзЯрж╛рж░ ржХрзМрж╢рж▓
рж▓ржЧржЖржЙржЯ ржХрж░рж▓рзЗ рж╕ржм ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ ржкржжрзНржзрждрж┐
////////////////////////////////////
import 'package:flutter/material.dart';                            // Flutter UI ржЗржоржкрзЛрж░рзНржЯ
import 'package:shared_preferences/shared_preferences.dart';       // Shared Preferences ржЗржоржкрзЛрж░рзНржЯ

void main() {
  runApp(MyApp());                                                 // ржЕрзНржпрж╛ржк ржЪрж╛рж▓рзБ
}

class MyApp extends StatefulWidget {
  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  final _formKey = GlobalKey<FormState>();                         // Form ржПрж░ Key (Validation ржПрж░ ржЬржирзНржп)
  final TextEditingController _nameCtrl = TextEditingController(); // Name Input ржПрж░ ржЬржирзНржп Controller
  final TextEditingController _passCtrl = TextEditingController(); // Password Input ржПрж░ ржЬржирзНржп Controller

  String? savedName;                                               // рж╕рзЗржн ржХрж░рж╛ ржирж╛ржо ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп
  bool isLoggedIn = false;                                         // рж▓ржЧржЗржи рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕

  @override
  void initState() {
    super.initState();
    loadUserData();                                                // ржЕрзНржпрж╛ржк ржЪрж╛рж▓рзБрж░ рж╕ржорзЯ ржбрзЗржЯрж╛ рж▓рзЛржб
  }

  // ЁЯФ╣ SharedPreferences ржерзЗржХрзЗ ржбрзЗржЯрж╛ рж▓рзЛржб
  void loadUserData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      savedName = prefs.getString('username');                     // ржирж╛ржо рж▓рзЛржб
      isLoggedIn = prefs.getBool('isLoggedIn') ?? false;           // рж▓ржЧржЗржи рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ рж▓рзЛржб
    });
  }

  // ЁЯФ╣ рж▓ржЧржЗржи ржХрж░рзЗ ржбрзЗржЯрж╛ рж╕рзЗржн
  void loginUser() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('username', _nameCtrl.text);             // ржирж╛ржо рж╕рзЗржн
    await prefs.setBool('isLoggedIn', true);                       // рж▓ржЧржЗржи рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ рж╕рзЗржн
    setState(() {
      savedName = _nameCtrl.text;
      isLoggedIn = true;
    });
  }

  // ЁЯФ╣ рж▓ржЧржЖржЙржЯ ржХрж░рзЗ ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рж╛
  void logoutUser() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.clear();                                           // рж╕ржм ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рж╛
    setState(() {
      savedName = null;
      isLoggedIn = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text("Login with Shared Preferences")),
        body: Center(
          child: isLoggedIn
              ? Column(                                            // рж▓ржЧржЗржи ржХрж░рж╛ ржерж╛ржХрж▓рзЗ
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text("Welcome, $savedName! ЁЯОЙ",
                        style: TextStyle(fontSize: 22)),
                    SizedBox(height: 20),
                    ElevatedButton(
                      onPressed: logoutUser,                       // рж▓ржЧржЖржЙржЯ ржмрж╛ржЯржи
                      child: Text("Logout"),
                    )
                  ],
                )
              : Padding(                                           // рж▓ржЧржЗржи ржлрж░рзНржо
                  padding: const EdgeInsets.all(20.0),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        TextFormField(                             // ржирж╛ржо ржЗржиржкрзБржЯ
                          controller: _nameCtrl,
                          decoration: InputDecoration(
                              labelText: "Enter your name",
                              border: OutlineInputBorder()),
                          validator: (value) {                     // Validation
                            if (value == null || value.isEmpty) {
                              return 'Please enter your name';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 20),
                        TextFormField(                             // ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб ржЗржиржкрзБржЯ
                          controller: _passCtrl,
                          obscureText: true,                       // ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб рж╣рж╛ржЗржб
                          decoration: InputDecoration(
                              labelText: "Enter your password",
                              border: OutlineInputBorder()),
                          validator: (value) {
                            if (value == null || value.length < 6) {
                              return 'Password must be at least 6 characters';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 20),
                        ElevatedButton(
                          onPressed: () {
                            if (_formKey.currentState!.validate()) {
                              loginUser();                         // ржбрзЗржЯрж╛ рж╕рзЗржн ржУ рж▓ржЧржЗржи
                            }
                          },
                          child: Text("Login"),
                        )
                      ],
                    ),
                  ),
                ),
        ),
      ),
    );
  }
}

..............................................................................................................................................
ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржмрж┐рж╖рзЯ ржУ рж╕рзЗрж░рж╛ ржЕржнрзНржпрж╛рж╕ (Best Practices) тЬи
ржПржЯрж┐ Asynchronous: shared_preferences-ржПрж░ рж╕ржм ржХрж╛ржЬ (get, set, remove) ржбрж┐ржнрж╛ржЗрж╕рзЗрж░ рж╕рзНржЯрзЛрж░рзЗржЬрзЗрж░ рж╕рж╛ржерзЗ рж╕ржорзНржкрж░рзНржХрж┐ржд, рждрж╛ржЗ ржПржЧрзБрж▓рзЛ рж╕ржорзНржкржирзНржи рж╣рждрзЗ ржХрж┐ржЫрзБржЯрж╛ рж╕ржорзЯ рж▓рж╛ржЧрзЗред ржПржХрж╛рж░ржгрзЗ рж╕ржм ржорзЗржержбржЗ async ржПржмржВ ржПржжрзЗрж░ рж╕рж╛ржерзЗ await ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣рзЯред
рж╕ржВржмрзЗржжржирж╢рзАрж▓ рждржерзНржпрзЗрж░ ржЬржирзНржп ржирзЯ: SharedPreferences ржПржиржХрзНрж░рж┐ржкржЯрзЗржб ржирзЯред рждрж╛ржЗ ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб, ржХрзНрж░рзЗржбрж┐ржЯ ржХрж╛рж░рзНржбрзЗрж░ рждржерзНржп, ржмрж╛ ржЕржирзНржп ржХрзЛржирзЛ ржЧрзЛржкржирзАржпрж╝ ржбрзЗржЯрж╛ ржПржЦрж╛ржирзЗ рж░рж╛ржЦрж╛ ржПржХржжржоржЗ ржЙржЪрж┐ржд ржирзЯред ржПрж░ ржЬржирзНржп flutter_secure_storage ржкрзНржпрж╛ржХрзЗржЬ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣рзЯред
ржмрзЬ ржбрзЗржЯрж╛рж░ ржЬржирзНржп ржирзЯ: ржПржЯрж┐ рж╢рзБржзрзБ ржЕрж▓рзНржк ржкрж░рж┐ржорж╛ржг ржбрзЗржЯрж╛ рж░рж╛ржЦрж╛рж░ ржЬржирзНржпред ржпржжрж┐ ржЖржкржирж╛рж░ ржЕржирзЗржХ ржмрзЗрж╢рж┐ рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░ржб ржбрзЗржЯрж╛ (ржпрзЗржоржи: ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржжрзЗрж░ рждрж╛рж▓рж┐ржХрж╛, ржкржгрзНржпрзЗрж░ рждрж╛рж▓рж┐ржХрж╛) рж░рж╛ржЦрж╛рж░ ржкрзНрж░рзЯрзЛржЬржи рж╣рзЯ, рждрж╛рж╣рж▓рзЗ sqflite (SQLite) ржмрж╛ hive-ржПрж░ ржорждрзЛ рж▓рзЛржХрж╛рж▓ ржбрзЗржЯрж╛ржмрзЗржЬ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗред