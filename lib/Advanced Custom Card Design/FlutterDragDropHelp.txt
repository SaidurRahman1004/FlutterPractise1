import 'package:flutter/material.dart';                     // Material Design UI toolkit ইমпорт (Widget, Theme, Icon ইত্যাদি ব্যবহার করতে)

class WishlistCartApp extends StatefulWidget {              // StatefulWidget: UI ডাইনামিকভাবে বদলাবে (state change হলে rebuild হবে)
  const WishlistCartApp({super.key});                       // const constructor: widget tree-তে অপ্টিমাইজেশনের জন্য

  @override
  State<WishlistCartApp> createState() => _WishlistCartAppState(); // State object তৈরি করে যা UI ও state হ্যান্ডেল করবে
}

class _WishlistCartAppState extends State<WishlistCartApp> {        // State ক্লাস: এখানে সব ভ্যারিয়েবল ও UI লজিক থাকবে
  final List<Map<String, dynamic>> _products = [                    // প্রোডাক্ট লিস্ট (নাম + আইকন) → Grid-এ দেখানো হবে
    {'name': 'Laptop', 'icon': Icons.laptop_chromebook},
    {'name': 'Phone', 'icon': Icons.phone_android},
    {'name': 'Headphones', 'icon': Icons.headset},
    {'name': 'Tablet', 'icon': Icons.tablet_mac},
    {'name': 'Watch', 'icon': Icons.watch},
  ];

  final List<Map<String, dynamic>> _cartItems = [];                 // Cart লিস্ট (drag করলে এখানে যোগ হবে)
  final List<Map<String, dynamic>> _wishlistItems = [];             // Wishlist লিস্ট (drag করলে এখানে যোগ হবে)

  bool _isCartHighlighted = false;                                  // Cart drop area hover/highlight state
  bool _isWishlistHighlighted = false;                              // Wishlist drop area hover/highlight state

  mysnk(msg, context) {                                             // Snackbar দেখানোর ছোট utility ফাংশন
    return ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(msg), duration: Duration(seconds: 3)), // ৩ সেকেন্ডের নোটিফিকেশন টোস্ট
    );
  }

  @override
  Widget build(BuildContext context) {                               // পুরো স্ক্রিনের UI
    return Scaffold(                                                 // Scaffold: AppBar + Body + Snackbar parent
      appBar: AppBar(title: Text("Wishlist & Cart")),               // উপরের টাইটেল বার
      body: Padding(                                                 // Body-এর চারপাশে padding
        padding: EdgeInsets.all(16.0),
        child: Column(                                               // উপরে Products Grid, নিচে Cart/Wishlist সেকশন
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(
              'Available Products',                                  // সেকশন হেডিং
              style: Theme.of(context).textTheme.titleLarge,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 10),                              // কিছু স্পেস
            Expanded(
              flex: 2,                                               // উপরের Grid view-কে মোট উচ্চতার 2/5 অংশ দেবে
              child: GridView.builder(                               // Products Grid
                itemCount: _products.length,                         // মোট কতটা কার্ড দেখাবে
                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 3,                                 // প্রতি লাইনে ৩টা আইটেম
                  childAspectRatio: 0.9,                             // কার্ডের অনুপাত (উচ্চতা/প্রস্থ)
                  crossAxisSpacing: 8,                               // গ্রিড কলামের ফাঁক
                  mainAxisSpacing: 8,                                // গ্রিড রো-র ফাঁক
                ),
                itemBuilder: (context, index) {
                  return _buildProductCard(_products[index]);        // প্রতিটি প্রোডাক্টের জন্য Draggable কার্ড
                },
              ),
            ),
            const Divider(height: 30, thickness: 1),                 // উপরের Grid আর নিচের Drop areas আলাদা করে
            Expanded(
              flex: 3,                                               // নিচের অংশ 3/5 উচ্চতা পাবে
              child: ListView(                                       // স্ক্রলযোগ্য কলাম (Cart + Wishlist)
                children: [
                  _buildDropTarget(                                  // Cart Drop Target
                    title: "Cart",
                    items: _cartItems,                               // Cart-এ থাকা আইটেমগুলোর তালিকা
                    highlightColor: Colors.blue,                     // hover করলে নীল টোন
                    isHighlighted: _isCartHighlighted,               // hover state (true হলে রঙ পাল্টাবে)
                    icon: Icons.shopping_cart,
                    onAccept: (item) {                               // ড্র্যাগড ডেটা accept করার সময়
                      if (!_cartItems.any((cartItem) =>
                          cartItem['name'] == item['name'])) {       // ডুপ্লিকেট এন্ট্রি আটকানো (নাম এক হলে আর যোগ করবে না)
                        _cartItems.add(item);                         // নতুন আইটেম Cart-এ যোগ
                      }
                    },
                    onEnter: () => setState(() {                     // ড্র্যাগ এরিয়া-তে ঢোকার সময় highlight অন
                      _isCartHighlighted = true;
                    }),
                    onLeave: () => setState(() {                     // ড্র্যাগ এরিয়া ছেড়ে গেলে highlight অফ
                      _isCartHighlighted = false;
                    }),
                  ),
                  _buildDropTarget(                                  // Wishlist Drop Target
                    title: "Wishlist",
                    items: _wishlistItems,                           // Wishlist-এ থাকা আইটেম
                    highlightColor: Colors.green,                    // hover করলে সবুজ টোন
                    isHighlighted: _isWishlistHighlighted,           // hover state
                    icon: Icons.favorite,
                    onAccept: (item) {                               // Wishlist accept
                      if (!_wishlistItems.any((wItem) =>
                          wItem['name'] == item['name'])) {          // ডুপ্লিকেট আটকানো
                        _wishlistItems.add(item);
                      }
                    },
                    onEnter: () => setState(() {                     // highlight অন
                      _isWishlistHighlighted = true;
                    }),
                    onLeave: () => setState(() {                     // highlight অফ
                      _isWishlistHighlighted = false;
                    }),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Draggable Product Card: গ্রিডে যে কার্ড দেখছ, সেটি ড্র্যাগ করা যাবে
  Widget _buildProductCard(Map<String, dynamic> product) {
    return Draggable<Map<String, dynamic>>(                         // Draggable: যাকে ধরে টেনে নেওয়া যায়
      data: product,                                                // টেনে নেওয়ার সাথে যে ডেটা যাবে (name, icon)
      feedback: Material(                                           // ড্র্যাগিং-এর সময় ভাসমান UI (overlay widget)
        elevation: 4,
        child: _buildProductUI(product, isDragging: true),          // ড্র্যাগ অবস্থার জন্য আলাদা লুক
      ),
      childWhenDragging: _buildProductUI(product, isDragging: true), // আসল জায়গায় কেমন দেখাবে যখন টানা হচ্ছে (ডিমড)
      child: _buildProductUI(product),                              // নরমাল অবস্থায় কার্ড UI
    );
  }

  // Product Card UI: একই কার্ড UI, শুধু ড্র্যাগিং হলে কিছু স্টাইল পাল্টায়
  Widget _buildProductUI(Map<String, dynamic> product, {bool isDragging = false}) {
    return Card(
      elevation: isDragging ? 0 : 4,                                // ড্র্যাগিং হলে elevation কম
      color: isDragging ? Colors.yellowAccent.withOpacity(0.3) : null, // ড্র্যাগিং হলে হালকা হলুদ tint
      margin: EdgeInsets.all(8),
      child: Padding(
        padding: EdgeInsets.all(12.0),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(product['icon'], size: 32),                         // প্রোডাক্ট আইকন
            SizedBox(height: 8),
            Text(product['name'], style: TextStyle(fontSize: 16)),   // প্রোডাক্ট নাম
          ],
        ),
      ),
    );
  }

  // Drop Target Widget: Cart/Wishlist — যেখানে ড্র্যাগ করে ফেলা হবে
  Widget _buildDropTarget({
    required String title,                                          // হেডিং: "Cart" বা "Wishlist"
    required List<Map<String, dynamic>> items,                      // সংশ্লিষ্ট লিস্ট (Cart/Wishlist)
    required Color highlightColor,                                  // hover color
    required bool isHighlighted,                                    // hover state
    required IconData icon,                                         // হেডিং আইকন
    required Function(Map<String, dynamic>) onAccept,               // ড্রপ করার পরে কি করবে (লিস্টে যোগ)
    required VoidCallback onEnter,                                  // hover শুরু হলে কি করবে (highlight অন)
    required VoidCallback onLeave,                                  // hover ছাড়লে কি করবে (highlight অফ)
  }) {
    return DragTarget<Map<String, dynamic>>(                        // DragTarget: ড্রপ রিসিভার
      builder: (context, candidateData, rejectedData) {             // UI কেমন হবে (candidateData মানে বর্তমানে hover করা আইটেম)
        return Container(
          margin: EdgeInsets.symmetric(vertical: 10.0),
          padding: EdgeInsets.all(16.00),
          width: double.infinity,
          decoration: BoxDecoration(
            color: isHighlighted                                     // hover হলে ব্যাকগ্রাউন্ড হালকা highlight
                ? highlightColor.withOpacity(0.2)
                : Colors.grey.shade200,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: isHighlighted ? highlightColor : Colors.grey,  // hover হলে বর্ডার রঙ highlightColor
              width: 2,
            ),
          ),
          child: Column(
            children: [
              Icon(                                                  // উপরে আইকন (Cart/Favorite)
                icon,
                size: 30,
                color: isHighlighted ? highlightColor : Colors.grey.shade700,
              ),
              SizedBox(height: 10),
              Text(
                title,                                               // "Cart" / "Wishlist" শিরোনাম
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 10),
              items.isEmpty                                          // যদি লিস্ট খালি হয়: hint টেক্সট
                  ? Text(
                      'Drag items here to add to $title',
                      style: TextStyle(color: Colors.grey.shade600),
                    )
                  : Wrap(                                            // যদি আইটেম থাকে: সেগুলো Chip আকারে দেখাবে
                      spacing: 8,
                      runSpacing: 4,
                      children: items
                          .map(
                            (item) => Chip(                          // প্রতিটি আইটেমকে Chip বানানো
                              avatar: Icon(item['icon'] as IconData, size: 18),
                              label: Text(item['name'] as String),
                              backgroundColor: highlightColor.withOpacity(0.1),
                              labelStyle: TextStyle(color: highlightColor),
                            ),
                          )
                          .toList(),
                    ),
            ],
          ),
        );
      },
      onWillAccept: (data) {                                         // ড্র্যাগ আইটেম এরিয়াতে ঢুকলেই ট্রিগার
        onEnter();                                                    // highlight অন করো (setState কল হয় কলব্যাকের ভিতরে)
        return true;                                                  // true দিলে ড্রপ গ্রহণযোগ্য
      },
      onAccept: (data) {                                              // ড্রপ হলেই ট্রিগার
        setState(() {                                                 // state পরিবর্তন → UI রিবিল্ড
          onAccept(data);                                             // লিস্টে আইটেম যোগ (ডুপ্লিকেট চেকসহ)
          onLeave();                                                  // ড্রপের পর highlight অফ
        });
        mysnk('${data['name']} added to $title', context);            // Snackbar: “Laptop added to Cart”
      },
      onLeave: (data) {                                               // ড্র্যাগ আইটেম এরিয়া থেকে বের হলেই
        onLeave();                                                    // highlight বন্ধ
      },
    );
  }
}

,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

🧠 এই প্রোজেক্টে কী করা হয়েছে? (সংক্ষিপ্ত সারাংশ)

Drag & Drop UI বানানো হয়েছে যেখানে উপরের Grid থেকে প্রোডাক্ট কার্ডগুলো টেনে নিচের Cart বা Wishlist-এ ফেলা যায়।
ড্র্যাগ করার সময় Drop area highlight হয় (visual feedback), আর ড্রপ হলে Snackbar মেসেজ দেখায়।
একই আইটেম দুইবার না যোগ হয়—এজন্য ডুপ্লিকেট চেক আছে।
প্রতিটি Drop area-তে যোগ হওয়া আইটেমগুলো Chip হিসেবে দেখায় (আইকন + নাম)।
setState ব্যবহার করে যখনই আইটেম যোগ/হাইলাইট অন-অফ হয়, UI rebuild হয়ে নতুন অবস্থা দেখায়।

⚙️ এই কোড লেখার প্রভাব/ফলাফল

User Experience: ড্র্যাগ-ড্রপ + হাইলাইট + Snackbar → খুব স্মুথ ইন্টার‌্যাকশন।
State Management: লোকাল স্টেট (setState) দিয়েই কাজ সমাধান; ছোট ফিচারের জন্য যথেষ্ট।
Performance: লিস্ট ছোট বলে সমস্যা নেই; বড় ডেটার জন্য ListView.builder, state lift-up বা state management (Provider/Bloc) ভাবা যেতে পারে।
Data Integrity: ডুপ্লিকেট যোগ বন্ধ রাখায় তালিকা পরিষ্কার থাকে।
Reusability: _buildDropTarget() ও _buildProductCard() আলাদা ফাংশন—পরে চাইলে অন্য পেজ/প্রজেক্টেও ব্যবহার করা যাবে।

কোডের সংক্ষিপ্ত বর্ণনা
এই ফ্লাটার কোডটি একটি ইন্টারেক্টিভ উইশলিস্ট এবং কার্ট অ্যাপ্লিকেশন তৈরি করে যেখানে ব্যবহারকারীরা পণ্যগুলিকে ড্র্যাগ অ্যান্ড ড্রপ করে উইশলিস্ট বা কার্টে যোগ করতে পারেন। অ্যাপটিতে নিম্নলিখিত মূল বৈশিষ্ট্য রয়েছে:

মূল কার্যকারিতা:
পণ্য প্রদর্শন: একটি গ্রিড লেআউটে ৫টি ভিন্ন পণ্য (ল্যাপটপ, ফোন, হেডফোন, ট্যাবলেট, ঘড়ি) প্রদর্শিত হয়, প্রতিটির নিজস্ব আইকন এবং নাম সহ।
ড্র্যাগ অ্যান্ড ড্রপ: ব্যবহারকারীরা যেকোনো পণ্যকে ড্র্যাগ করে কার্ট বা উইশলিস্টে নিয়ে যেতে পারেন।
ভিজ্যুয়াল ফিডব্যাক:
ড্র্যাগ করার সময় পণ্যটির চেহারা পরিবর্তিত হয় (হালকা হলুদ ব্যাকগ্রাউন্ড)।
কার্ট বা উইশলিস্ট এলাকায় পণ্য নিয়ে গেলে সেই এলাকা হাইলাইট হয় (কার্ট: নীল, উইশলিস্ট: সবুজ)।
ডুপ্লিকেশন প্রতিরোধ: একই পণ্য একাধিকবার কার্ট বা উইশলিস্টে যোগ করা যায় না।
স্ন্যাকবার নোটিফিকেশন: পণ্য সফলভাবে যোগ করার পর একটি নোটিফিকেশন দেখায়।
আইটেম প্রদর্শন: কার্ট এবং উইশলিস্টে যোগ করা আইটেমগুলি চিপ আকারে প্রদর্শিত হয়, যাতে পণ্যের আইকন এবং নাম থাকে।
কারিগরি বাস্তবায়ন:
StatefulWidget: অ্যাপের অবস্থা (কার্ট এবং উইশলিস্টে আইটেম) পরিবর্তনের জন্য ব্যবহৃত হয়েছে।
Draggable এবং DragTarget: ড্র্যাগ অ্যান্ড ড্রপ কার্যকারিতা বাস্তবায়নের জন্য ব্যবহৃত হয়েছে।
GridView.builder: পণ্যগুলিকে গ্রিড আকারে প্রদর্শন করতে ব্যবহৃত হয়েছে।
ListView: কার্ট এবং উইশলিস্ট এলাকা তৈরি করতে ব্যবহৃত হয়েছে।
setState(): UI আপডেট করতে ব্যবহৃত হয়েছে যখন কোনো আইটেম যোগ করা হয় বা হাইলাইট স্টেট পরিবর্তিত হয়।
কোডের প্রভাব:
এই কোডটি চালানোর ফলে ব্যবহারকারীরা একটি ইন্টারেক্টিভ শপিং ইন্টারফেস পাবেন যেখানে তারা:

সহজেই পণ্য নির্বাচন করতে পারবেন
পছন্দের পণ্যগুলি উইশলিস্টে সংরক্ষণ করতে পারবেন
কিনতে চাওয়া পণ্যগুলি কার্টে যোগ করতে পারবেন
ভিজ্যুয়াল ফিডব্যাকের মাধ্যমে বুঝতে পারবেন কোন পণ্যটি কোথায় যোগ করা হচ্ছে
ডুপ্লিকেশন এড়াতে পারবেন
এটি ই-কমার্স অ্যাপ্লিকেশনগুলির জন্য একটি গুরুত্বপূর্ণ ফিচার যা ব্যবহারকারী অভিজ্ঞতা উন্নত করে এবং কেনাকাটার প্রক্রিয়াকে সহজ করে তোলে।

...............................................................................
টেস্ট কুইজ
চমৎকার এই কাজের পর, এবার তোমার জ্ঞান যাচাইয়ের পালা।

প্রশ্ন ১: Draggable<T> এবং DragTarget<T>-এর মধ্যে <T> (Generic Type) ব্যবহার করা এত গুরুত্বপূর্ণ কেন? যদি Draggable<Color>-কে একটি DragTarget<String>-এর ওপর ড্রপ করা হয়, তাহলে কী ঘটবে?

প্রশ্ন ২: Draggable উইজেটের child এবং feedback প্রোপার্টির মধ্যে মূল পার্থক্য কী?

প্রশ্ন ৩: একটি আইটেম সফলভাবে ড্রপ হওয়ার পর মূল কাজটি (যেমন লিস্টে আইটেম যোগ করা) DragTarget-এর কোন কলব্যাক ফাংশনে লেখা হয়? আর ড্রপ করার আগেই আইটেমটি গ্রহণ করা যাবে কিনা, সেই সিদ্ধান্ত কোন ফাংশনে নেওয়া হয়?


;;;;;;;;;;
 প্রশ্ন ১

Draggable<T> এবং DragTarget<T>-এ <T> কেন দরকার?

<T> হচ্ছে Generic Type, যেটা ড্র্যাগ করা ডেটার টাইপ ঠিক করে।

ধরো তুমি Draggable<String> ব্যবহার করছো → তাহলে সেই Draggable কেবল String ডেটা বহন করবে।

একইভাবে DragTarget<String> কেবল String টাইপের ডেটা গ্রহণ করবে।

👉 যদি তুমি ভুল করো — যেমন Draggable<Color> কে DragTarget<String>-এ ড্রপ করো,
তাহলে কোনো ম্যাচ হবে না → onWillAccept ও onAccept এক্সিকিউট হবে না।
মানে, ড্র্যাগ ঠিকই হবে, কিন্তু ড্রপ হবে না।

 প্রশ্ন ২

Draggable এর child vs feedback

child → স্ক্রিনে যেটা স্বাভাবিক অবস্থায় দেখা যায়।
(যেমন: একটি Chip "Buy groceries")

feedback → ড্র্যাগ করার সময় ইউজারের আঙুল/কার্সরের নিচে যেটা ভেসে বেড়ায়।
(অften একই Chip, কিন্তু তুমি চাইলে এটাকে বড়, অর্ধেক ট্রান্সপারেন্ট বা অন্য রঙে করতে পারো)

👉 তাই child = আসল জায়গায় দৃশ্যমান উইজেট,
আর feedback = ড্র্যাগ করার সময় চলমান উইজেট।

 প্রশ্ন ৩

ড্রপ হওয়ার পর মূল কাজ DragTarget-এর কোন কলব্যাকে হয়?

 ড্রপ হওয়ার পর কাজ হয় → onAccept
(এখানেই তুমি লিস্টে আইটেম যোগ করবে বা আপডেট করবে)।

ড্রপ করার আগেই অনুমতি দেওয়ার কাজ কোন ফাংশনে হয়?

 সেটা হয় → onWillAccept
(এখানে তুমি চেক করতে পারো ডেটা ঠিক আছে কি না, তারপর true/false রিটার্ন করবে)।

🔎 সংক্ষেপে উত্তরগুলো

<T> টাইপ ম্যাচিং নিশ্চিত করে; টাইপ মেলেনি → ড্রপ হবে না।

child = স্থির উইজেট, feedback = ড্র্যাগ চলাকালে ভেসে বেড়ানো উইজেট।

ড্রপের পর কাজ → onAccept, ড্রপের আগে অনুমতি → onWillAccept।